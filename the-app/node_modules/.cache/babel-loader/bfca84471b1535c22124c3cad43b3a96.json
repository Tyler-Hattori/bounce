{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\thatt\\\\winter-project\\\\the-app\\\\src\\\\Important Pages\\\\LineRiderGame.js\";\nimport './LineRiderGame.css';\nimport '../index.css'; //I moved the intro page messages to this one so that they will move away with the background\n\nimport React from 'react';\nimport GameOver from './GameOver.js';\nimport Ball from '../Components/Ball';\nimport Tile from '../Components/Ball';\nimport tileImage from '../Backgrounds/tile.jpg';\n\nclass LineRiderGame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.state = {\n      yPos: 150,\n      xPos: 220,\n      ballDirection: '',\n      timeoutId: 0,\n      gameLoopTimeout: 50,\n      ballSpeedY: 0,\n      ballSpeedX: 0,\n      gravity: 2,\n      xAcceleration: 0.6,\n      ballSize: 40,\n      keyPressed: false,\n      bounced: false,\n      isGameover: false,\n      loggedIn: false,\n      setName: '',\n      attempts: 1,\n      difficulty: props.difficulty\n    };\n  }\n\n  componentDidMount() {\n    this.tiles = this.createGround();\n    window.addEventListener('keydown', this.handleKeyDown);\n    this.gameLoop();\n  }\n\n  createGround() {\n    let tiles = [];\n    const tileCount = Math.floor(Math.random() * (10 - this.state.difficulty)) + 1;\n\n    for (let i = 0; i < tileCount; i++) {\n      const x = Math.floor(Math.random() * 500) + 1;\n      const y = Math.floor(Math.random() * 700) + 1;\n      tiles.push( /*#__PURE__*/_jsxDEV(Tile, {\n        image: tileImage,\n        xPos: x + this.state.xPos,\n        yPos: y\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 24\n      }, this));\n    }\n\n    return tiles;\n  }\n\n  gameLoop() {\n    let timeoutId = setTimeout(() => {\n      if (!this.state.isGameOver) {\n        this.fall();\n        this.changeDirection();\n        this.setState({\n          keyPressed: false,\n          ballDirection: 'zero acceleration'\n        });\n      }\n\n      this.gameLoop();\n    }, this.state.gameLoopTimeout);\n    this.setState({\n      timeoutId\n    });\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.state.timeoutId);\n    window.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  fall() {\n    let grav = this.state.gravity;\n    let ball_speed = this.state.ballSpeedY;\n    let y = this.state.yPos + ball_speed;\n    let game_height = document.getElementById(\"fill_screen\").clientHeight - this.state.ballSize - 10;\n\n    if (this.state.yPos >= game_height && !this.state.bounced) {\n      ball_speed *= -1;\n      this.setState({\n        bounced: true\n      });\n    }\n\n    if (this.state.yPos < game_height && this.state.bounced) {\n      this.setState({\n        bounced: false\n      });\n    }\n\n    this.setState({\n      ballSpeedY: ball_speed + grav,\n      yPos: y\n    });\n  }\n\n  changeDirection() {\n    switch (this.state.ballDirection) {\n      case 'left':\n        this.moveSideways('left');\n        break;\n\n      case 'right':\n        this.moveSideways('right');\n        break;\n\n      case 'zero acceleration':\n        this.moveSideways('zero acceleration');\n        break;\n\n      default:\n    }\n  }\n\n  moveSideways(dir) {\n    let acceleration = this.state.xAcceleration;\n    let ball_speed = this.state.ballSpeedX;\n    if (dir === 'left') acceleration = acceleration * -1;\n    if (dir === 'zero acceleration') acceleration = 0;\n    let x = this.state.xPos + ball_speed;\n    this.setState({\n      ballSpeedX: ball_speed + acceleration,\n      xPos: x\n    });\n  }\n\n  handleKeyDown(event) {\n    switch (event.keyCode) {\n      case 37:\n        this.setState({\n          ballDirection: 'left'\n        });\n        break;\n\n      case 39:\n        this.setState({\n          ballDirection: 'right'\n        });\n        break;\n\n      default:\n    }\n\n    this.setState({\n      keyPressed: true\n    });\n  }\n\n  render() {\n    if (this.state.isGameOver) {\n      return /*#__PURE__*/_jsxDEV(GameOver, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"fill_screen\",\n          style: {\n            left: -1 * this.state.xPos\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"attempt_text\",\n          style: {\n            left: -1 * this.state.xPos\n          },\n          children: [\"Attempt: \", this.state.attempts]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Ball, {\n          yPos: this.state.yPos,\n          height: this.state.ballSize\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this), this.tiles]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\n\nexport default LineRiderGame;","map":{"version":3,"sources":["C:/Users/thatt/winter-project/the-app/src/Important Pages/LineRiderGame.js"],"names":["React","GameOver","Ball","Tile","tileImage","LineRiderGame","Component","constructor","props","handleKeyDown","bind","state","yPos","xPos","ballDirection","timeoutId","gameLoopTimeout","ballSpeedY","ballSpeedX","gravity","xAcceleration","ballSize","keyPressed","bounced","isGameover","loggedIn","setName","attempts","difficulty","componentDidMount","tiles","createGround","window","addEventListener","gameLoop","tileCount","Math","floor","random","i","x","y","push","setTimeout","isGameOver","fall","changeDirection","setState","componentWillUnmount","clearTimeout","removeEventListener","grav","ball_speed","game_height","document","getElementById","clientHeight","moveSideways","dir","acceleration","event","keyCode","render","left"],"mappings":"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","sourcesContent":["import './LineRiderGame.css'\r\nimport '../index.css' //I moved the intro page messages to this one so that they will move away with the background\r\nimport React from 'react'\r\nimport GameOver from './GameOver.js'\r\nimport Ball from '../Components/Ball'\r\nimport Tile from '../Components/Ball'\r\nimport tileImage from '../Backgrounds/tile.jpg'\r\n\r\nclass LineRiderGame extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.handleKeyDown = this.handleKeyDown.bind(this)\r\n\r\n        this.state = {\r\n            yPos: 150,\r\n            xPos: 220,\r\n            ballDirection: '',\r\n            timeoutId: 0,\r\n            gameLoopTimeout: 50,\r\n            ballSpeedY: 0,\r\n            ballSpeedX: 0,\r\n            gravity: 2,\r\n            xAcceleration: 0.6,\r\n            ballSize: 40,\r\n            keyPressed: false,\r\n            bounced: false,\r\n            isGameover: false,\r\n            loggedIn: false,\r\n            setName: '',\r\n            attempts: 1,\r\n            difficulty: props.difficulty,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.tiles = this.createGround()\r\n        window.addEventListener('keydown', this.handleKeyDown)\r\n        this.gameLoop()\r\n    }\r\n\r\n    createGround() {\r\n        let tiles = [];\r\n        const tileCount = Math.floor(Math.random() * (10-this.state.difficulty)) + 1;\r\n        for (let i = 0; i < tileCount; i++) {\r\n            const x = Math.floor(Math.random() * 500) + 1;\r\n            const y = Math.floor(Math.random() * 700) + 1;            \r\n\r\n            tiles.push(<Tile image={tileImage} xPos={x+this.state.xPos} yPos={y}/>);\r\n        }\r\n\r\n        return tiles;\r\n    }\r\n\r\n    gameLoop() { \r\n\r\n        let timeoutId = setTimeout(() => {\r\n            if (!this.state.isGameOver) {\r\n              this.fall()\r\n              this.changeDirection()\r\n              this.setState({ keyPressed: false, ballDirection: 'zero acceleration' })\r\n            }\r\n      \r\n            this.gameLoop()\r\n          }, this.state.gameLoopTimeout)\r\n      \r\n        this.setState({ timeoutId })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.state.timeoutId)\r\n        window.removeEventListener('keydown', this.handleKeyDown)\r\n    }\r\n\r\n    fall() {\r\n        let grav = this.state.gravity\r\n        let ball_speed = this.state.ballSpeedY\r\n        let y = this.state.yPos + ball_speed\r\n        let game_height = document.getElementById(\"fill_screen\").clientHeight - this.state.ballSize - 10\r\n        if (this.state.yPos >= game_height && !this.state.bounced) {\r\n            ball_speed *= -1\r\n            this.setState({bounced: true})\r\n        }\r\n        if (this.state.yPos < game_height && this.state.bounced) {\r\n            this.setState({bounced: false})\r\n        }\r\n        this.setState({\r\n            ballSpeedY: ball_speed + grav,\r\n            yPos: y})\r\n    }\r\n\r\n    changeDirection() {\r\n        switch (this.state.ballDirection) {\r\n          case 'left':\r\n              this.moveSideways('left')\r\n            break\r\n          case 'right':\r\n              this.moveSideways('right')\r\n              break\r\n          case 'zero acceleration':\r\n              this.moveSideways('zero acceleration')\r\n            break\r\n          default:\r\n        }\r\n    }\r\n\r\n    moveSideways(dir) {\r\n        let acceleration = this.state.xAcceleration\r\n        let ball_speed = this.state.ballSpeedX\r\n        if (dir === 'left')\r\n            acceleration = acceleration * -1\r\n        if (dir === 'zero acceleration')\r\n            acceleration = 0;\r\n        let x = this.state.xPos + ball_speed\r\n        this.setState({\r\n            ballSpeedX: ball_speed + acceleration,\r\n            xPos: x\r\n        })\r\n    }\r\n\r\n    handleKeyDown(event) {\r\n        switch (event.keyCode) {\r\n            case 37:\r\n                this.setState({ ballDirection: 'left' })\r\n                break\r\n            case 39:\r\n                this.setState({ ballDirection: 'right' })\r\n                break\r\n            default:\r\n        }\r\n        this.setState({\r\n            keyPressed: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isGameOver) {\r\n            return (\r\n                <GameOver/>\r\n            )\r\n        }\r\n        else {\r\n            return(\r\n                <div>\r\n                    <div id= \"fill_screen\" style= {{left: -1*this.state.xPos}}/>\r\n                    <p className= \"attempt_text\" style= {{left: -1*this.state.xPos}}>Attempt: {this.state.attempts}</p>\r\n                    <Ball yPos={this.state.yPos}\r\n                        height={this.state.ballSize}/>\r\n                    {this.tiles}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\nexport default LineRiderGame;"]},"metadata":{},"sourceType":"module"}