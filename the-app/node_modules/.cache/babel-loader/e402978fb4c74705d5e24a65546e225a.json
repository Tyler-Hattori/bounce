{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\thatt\\\\winter-project\\\\the-app\\\\src\\\\Important Pages\\\\LineRiderGame.js\";\nimport './LineRiderGame.css';\nimport '../index.css'; //I moved the intro page messages to this one so that they will move away with the background\n\nimport React from 'react';\nimport GameOver from './GameOver.js';\nimport Ball from '../Components/Ball';\nimport Tile from '../Components/Tile';\nimport tileImage from '../Backgrounds/tile.jpg';\n\nclass LineRiderGame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.state = {\n      yPos: 150,\n      xPos: 220,\n      ballDirection: '',\n      timeoutId: 0,\n      gameLoopTimeout: 50,\n      ballSpeedY: 0,\n      ballSpeedX: 0,\n      maxSpeed: 35,\n      gravity: props.difficulty,\n      xAcceleration: 2,\n      ballSize: 40,\n      keyPressed: false,\n      bounced: false,\n      isGameover: false,\n      loggedIn: false,\n      setName: '',\n      attempts: 1,\n      difficulty: props.difficulty\n    };\n  }\n\n  componentDidMount() {\n    this.tiles = this.createGround();\n    window.addEventListener('keydown', this.handleKeyDown);\n    this.gameLoop();\n  }\n\n  createGround() {\n    let tiles = [];\n    const tileCount = 30 - Math.floor(Math.random() * (5 * this.state.difficulty));\n\n    for (let i = 0; i < tileCount; i++) {\n      const x = Math.floor(Math.random() * document.getElementById(\"fill_screen\").clientWidth) + this.state.xPos;\n      const y = document.getElementById(\"fill_screen\").clientHeight - 50;\n      tiles.push( /*#__PURE__*/_jsxDEV(Tile, {\n        image: tileImage,\n        height: 50,\n        xPos: x,\n        yPos: y\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 24\n      }, this));\n    }\n\n    return tiles;\n  }\n\n  gameLoop() {\n    let timeoutId = setTimeout(() => {\n      if (!this.state.isGameOver) {\n        this.fall();\n        this.changeDirection();\n        this.setState({\n          keyPressed: false,\n          ballDirection: 'zero acceleration'\n        });\n        if (this.state.xPos % 1000 <= this.state.ballSpeedX / 2) this.tiles.push(this.createGround());\n      }\n\n      this.gameLoop();\n    }, this.state.gameLoopTimeout);\n    this.setState({\n      timeoutId\n    });\n  }\n\n  isThereCollision() {\n    let ball = {\n      x: this.state.xPos - this.state.ballSize / 2,\n      y: this.state.yPos - this.state.ballSize / 2,\n      width: this.state.ballSize,\n      height: this.state.ballSize\n    };\n    const collided = this.tiles.find(a => {\n      var tile = {\n        x: a.props.xPos - a.props.height / 2,\n        y: a.props.yPos - a.props.height / 2,\n        width: a.props.height,\n        height: a.props.height\n      };\n      if (ball.x < tile.x + tile.width && ball.x + ball.width > tile.x && ball.y < tile.y + tile.height && ball.y + ball.height > tile.y) return true;\n      return false;\n    });\n    return collided;\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.state.timeoutId);\n    window.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  fall() {\n    let grav = this.state.gravity;\n    let ball_speed = this.state.ballSpeedY;\n    let y = this.state.yPos + ball_speed;\n\n    if (this.isThereCollision() && !this.state.bounced) {\n      ball_speed *= -1;\n      this.setState({\n        bounced: true\n      });\n    }\n\n    if (this.isThereCollision() && this.state.bounced) {\n      this.setState({\n        bounced: false\n      });\n    }\n\n    this.setState({\n      ballSpeedY: ball_speed + grav,\n      yPos: y\n    });\n  }\n\n  changeDirection() {\n    switch (this.state.ballDirection) {\n      case 'left':\n        this.moveSideways('left');\n        break;\n\n      case 'right':\n        this.moveSideways('right');\n        break;\n\n      case 'zero acceleration':\n        this.moveSideways('zero acceleration');\n        break;\n\n      default:\n    }\n  }\n\n  moveSideways(dir) {\n    let acceleration = this.state.xAcceleration;\n    let ball_speed = this.state.ballSpeedX;\n    if (dir === 'left') acceleration = acceleration * -1;\n    if (dir === 'zero acceleration') acceleration = 0;\n    if (ball_speed < this.state.maxSpeed && ball_speed > this.state.maxSpeed * -1 || ball_speed >= this.state.maxSpeed && acceleration < 0 || ball_speed <= this.state.maxSpeed * -1 && acceleration > 0) ball_speed += acceleration;\n    let x = this.state.xPos + ball_speed;\n    this.setState({\n      ballSpeedX: ball_speed,\n      xPos: x\n    });\n  }\n\n  handleKeyDown(event) {\n    switch (event.keyCode) {\n      case 37:\n        this.setState({\n          ballDirection: 'left'\n        });\n        break;\n\n      case 39:\n        this.setState({\n          ballDirection: 'right'\n        });\n        break;\n\n      default:\n    }\n\n    this.setState({\n      keyPressed: true\n    });\n  }\n\n  render() {\n    if (this.state.isGameOver) {\n      return /*#__PURE__*/_jsxDEV(GameOver, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"fill_screen\",\n          style: {\n            left: -1 * this.state.xPos\n          },\n          children: this.tiles\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"white_text\",\n          style: {\n            left: -1 * this.state.xPos\n          },\n          children: [\"Attempt: \", this.state.attempts, \"        xPos: \", this.state.xPos, \"         ballSpeedX: \", this.state.ballSpeedX]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Ball, {\n          yPos: this.state.yPos,\n          height: this.state.ballSize\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\n\nexport default LineRiderGame;","map":{"version":3,"sources":["C:/Users/thatt/winter-project/the-app/src/Important Pages/LineRiderGame.js"],"names":["React","GameOver","Ball","Tile","tileImage","LineRiderGame","Component","constructor","props","handleKeyDown","bind","state","yPos","xPos","ballDirection","timeoutId","gameLoopTimeout","ballSpeedY","ballSpeedX","maxSpeed","gravity","difficulty","xAcceleration","ballSize","keyPressed","bounced","isGameover","loggedIn","setName","attempts","componentDidMount","tiles","createGround","window","addEventListener","gameLoop","tileCount","Math","floor","random","i","x","document","getElementById","clientWidth","y","clientHeight","push","setTimeout","isGameOver","fall","changeDirection","setState","isThereCollision","ball","width","height","collided","find","a","tile","componentWillUnmount","clearTimeout","removeEventListener","grav","ball_speed","moveSideways","dir","acceleration","event","keyCode","render","left"],"mappings":"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","sourcesContent":["import './LineRiderGame.css'\r\nimport '../index.css' //I moved the intro page messages to this one so that they will move away with the background\r\nimport React from 'react'\r\nimport GameOver from './GameOver.js'\r\nimport Ball from '../Components/Ball'\r\nimport Tile from '../Components/Tile'\r\nimport tileImage from '../Backgrounds/tile.jpg'\r\n\r\nclass LineRiderGame extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.handleKeyDown = this.handleKeyDown.bind(this)\r\n\r\n        this.state = {\r\n            yPos: 150,\r\n            xPos: 220,\r\n            ballDirection: '',\r\n            timeoutId: 0,\r\n            gameLoopTimeout: 50,\r\n            ballSpeedY: 0,\r\n            ballSpeedX: 0,\r\n            maxSpeed: 35,\r\n            gravity: props.difficulty,\r\n            xAcceleration: 2,\r\n            ballSize: 40,\r\n            keyPressed: false,\r\n            bounced: false,\r\n            isGameover: false,\r\n            loggedIn: false,\r\n            setName: '',\r\n            attempts: 1,\r\n            difficulty: props.difficulty,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.tiles = this.createGround()\r\n        window.addEventListener('keydown', this.handleKeyDown)\r\n        this.gameLoop()\r\n    }\r\n\r\n    createGround() {\r\n        let tiles = [];\r\n        const tileCount = 30 - Math.floor(Math.random() * (5*this.state.difficulty));\r\n        for (let i = 0; i < tileCount; i++) {\r\n            const x = Math.floor(Math.random() * document.getElementById(\"fill_screen\").clientWidth) + this.state.xPos\r\n            const y = document.getElementById(\"fill_screen\").clientHeight - 50            \r\n\r\n            tiles.push(<Tile image={tileImage} height= {50} xPos={x} yPos={y}/>);\r\n        }\r\n\r\n        return tiles;\r\n    }\r\n\r\n    gameLoop() { \r\n\r\n        let timeoutId = setTimeout(() => {\r\n            if (!this.state.isGameOver) {\r\n              this.fall()\r\n              this.changeDirection()\r\n              this.setState({ keyPressed: false, ballDirection: 'zero acceleration' })\r\n              if (this.state.xPos % 1000 <= this.state.ballSpeedX/2)\r\n                this.tiles.push(this.createGround());\r\n            }\r\n      \r\n            this.gameLoop()\r\n          }, this.state.gameLoopTimeout)\r\n      \r\n        this.setState({ timeoutId })\r\n    }\r\n\r\n    isThereCollision() {\r\n        let ball = {x: this.state.xPos - this.state.ballSize/2, y: this.state.yPos - this.state.ballSize/2, \r\n                    width: this.state.ballSize, height: this.state.ballSize}\r\n        const collided = this.tiles.find(a => {\r\n            var tile = {x: a.props.xPos - a.props.height/2, y: a.props.yPos - a.props.height/2,\r\n                        width: a.props.height, height: a.props.height}\r\n            if (ball.x < tile.x + tile.width && ball.x + ball.width > tile.x &&\r\n                ball.y < tile.y + tile.height && ball.y + ball.height > tile.y)\r\n                    return true\r\n            return false\r\n        })\r\n\r\n        return collided\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.state.timeoutId)\r\n        window.removeEventListener('keydown', this.handleKeyDown)\r\n    }\r\n\r\n    fall() {\r\n        let grav = this.state.gravity\r\n        let ball_speed = this.state.ballSpeedY\r\n        let y = this.state.yPos + ball_speed\r\n        if (this.isThereCollision() && !this.state.bounced) {\r\n            ball_speed *= -1\r\n            this.setState({bounced: true})\r\n        }\r\n        if (this.isThereCollision() && this.state.bounced) {\r\n            this.setState({bounced: false})\r\n        }\r\n        this.setState({\r\n            ballSpeedY: ball_speed + grav,\r\n            yPos: y})\r\n    }\r\n\r\n    changeDirection() {\r\n        switch (this.state.ballDirection) {\r\n          case 'left':\r\n              this.moveSideways('left')\r\n            break\r\n          case 'right':\r\n              this.moveSideways('right')\r\n              break\r\n          case 'zero acceleration':\r\n              this.moveSideways('zero acceleration')\r\n            break\r\n          default:\r\n        }\r\n    }\r\n\r\n    moveSideways(dir) {\r\n        let acceleration = this.state.xAcceleration\r\n        let ball_speed = this.state.ballSpeedX\r\n        if (dir === 'left')\r\n            acceleration = acceleration * -1\r\n        if (dir === 'zero acceleration')\r\n            acceleration = 0;\r\n        if ((ball_speed < this.state.maxSpeed && ball_speed > this.state.maxSpeed*-1)\r\n            || (ball_speed >= this.state.maxSpeed && acceleration < 0) || (ball_speed <= this.state.maxSpeed*-1 && acceleration > 0))\r\n            ball_speed += acceleration\r\n        let x = this.state.xPos + ball_speed\r\n        this.setState({\r\n            ballSpeedX: ball_speed,\r\n            xPos: x\r\n        })\r\n    }\r\n\r\n    handleKeyDown(event) {\r\n        switch (event.keyCode) {\r\n            case 37:\r\n                this.setState({ ballDirection: 'left' })\r\n                break\r\n            case 39:\r\n                this.setState({ ballDirection: 'right' })\r\n                break\r\n            default:\r\n        }\r\n        this.setState({\r\n            keyPressed: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isGameOver) {\r\n            return (\r\n                <GameOver/>\r\n            )\r\n        }\r\n        else {\r\n            return(\r\n                <div>\r\n                    <div id= \"fill_screen\" style= {{left: -1*this.state.xPos}}>\r\n                        {this.tiles}\r\n                    </div>\r\n                    <p className= \"white_text\" style= {{left: -1*this.state.xPos}}>Attempt: {this.state.attempts}        xPos: {this.state.xPos}         ballSpeedX: {this.state.ballSpeedX}</p>\r\n                    <Ball yPos={this.state.yPos}\r\n                        height={this.state.ballSize}/>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\nexport default LineRiderGame;\r\n"]},"metadata":{},"sourceType":"module"}