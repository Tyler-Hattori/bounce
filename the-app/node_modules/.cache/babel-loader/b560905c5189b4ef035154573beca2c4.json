{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\thatt\\\\winter-project\\\\the-app\\\\src\\\\Important Pages\\\\LineRiderGame.js\";\nimport './LineRiderGame.css';\nimport '../index.css'; //I moved the intro page messages to this one so that they will move away with the background\n\nimport React from 'react';\nimport GameOver from './GameOver.js';\n\nclass LineRiderGame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleKeyDown = this.handleKeyDown.bind(this); //Quick JAVA/REACT variable usage tutorial:\n    //I use the terms method and function interchangably. Also, the term object just means something we created that follows the rules of a certain class.\n    //IN JAVA, you typically initialize a variable in the constructor, and create two methods (normally called \"setVariable()\" and \"getVariable()\" )...\n    //that can be used to change or access the variable's value at a later time. However, the variables in a CLASS's constructor can be used...\n    //inside ANY method in that CLASS as long as you say this.variable_name (\"this.\" points to the CLASS--LineRiderGame in this case)...\n    //If you were to not use \"this.\" , the code would try to find a variable called variable_name inside that METHOD. This is why \"this.\" is...\n    //so important. \n    //The reason we like setVariable() and getVariable() methods in Java is because what if we want to know the value of a variable from...\n    //an object of a DIFFERENT class? \"this.\" wouldn't work, because it wouldn't point to the right class. Well, with a getVariable() method...\n    //we could say \"object_name.getVariable()\" and it would work fine. \n    //HOWEVER, REACT IS A LITTLE DIFFERENT\n    //In React, in a class constructor, initialize variables inside \"this.state\" as shown below. Then, if we want to change the value of a variable,...\n    //to 2 just call this.setState = { variable: 2 }. If you read this code, you'll see how to use setState() to easily change multiple values at once.\n    //The downside is instead of using \"this.variable\" you have to use \"this.state.variable\"\n\n    this.state = {\n      yPos: 150,\n      xPos: 220,\n      ballDirection: '',\n      timeoutId: 0,\n      gameLoopTimeout: 50,\n      ballSpeedY: 0,\n      ballSpeedX: 0,\n      gravity: 2,\n      xAcceleration: 0.6,\n      ballSize: 40,\n      keyPressed: false,\n      bounced: false,\n      isGameover: false,\n      loggedIn: false,\n      setName: ''\n    };\n  } //You can normally name methods whatever you want, but some names have been preset to do certain things\n  //This is specially-named method in REACT that will run immediately after LineRiderGame is created\n\n\n  componentDidMount() {\n    window.addEventListener('keydown', this.handleKeyDown);\n    this.gameLoop();\n  }\n\n  gameLoop() {\n    //by calling gameLoop() inside this method, it creates a loop... \n    //so we can constantly be updating object positions on the page...\n    //or check if the user is pressing a key\n    let timeoutId = setTimeout(() => {\n      //timeouts will run everything in the first parameter after a certain amount of time (second parameter-gameLoopTimeout)\n      if (!this.state.isGameOver) {\n        //the user did selecte the difficulty, and the game is not over. This is the gameplay\n        this.fall(); //implements gravity\n\n        this.changeDirection();\n        this.setState({\n          keyPressed: false,\n          ballDirection: 'zero acceleration'\n        });\n      }\n\n      this.gameLoop();\n    }, this.state.gameLoopTimeout);\n    this.setState({\n      timeoutId\n    });\n  } //This is also a specially-named method\n\n\n  componentWillUnmount() {\n    clearTimeout(this.state.timeoutId);\n    window.removeEventListener('keydown', this.handleKeyDown);\n  } //EVERYTHING UNTIL THE NEXT LINE IS FOR BALL MOVEMENT______________________________________________________________________________\n  //gravity. document.getElementByID() is an extremely useful tool to access the properties of an HTML element.\n  //Check out the render() method to see what I'm talking about.\n\n\n  fall() {\n    let grav = this.state.gravity;\n    let ball_speed = this.state.ballSpeedY;\n    let y = this.state.yPos + ball_speed;\n    let game_height = document.getElementById(\"fill_screen\").clientHeight - this.state.ballSize - 10;\n\n    if (this.state.yPos >= game_height && !this.state.bounced) {\n      ball_speed *= -1;\n      this.setState({\n        bounced: true\n      });\n    }\n\n    if (this.state.yPos < game_height && this.state.bounced) {\n      this.setState({\n        bounced: false\n      });\n    }\n\n    this.setState({\n      ballSpeedY: ball_speed + grav,\n      yPos: y\n    });\n  } //since it was called in gameLoop(), it will constantly be checking what the ballDirection is (left or right)\n  //switch and case is just a fancy way to get around using if and else if statements.\n\n\n  changeDirection() {\n    switch (this.state.ballDirection) {\n      case 'left':\n        this.moveSideways('left');\n        break;\n\n      case 'right':\n        this.moveSideways('right');\n        break;\n\n      case 'zero acceleration':\n        this.moveSideways('zero acceleration');\n        break;\n\n      default:\n    }\n  } //essentially gravity in the sideways direction\n\n\n  moveSideways(dir) {\n    let acceleration = this.state.xAcceleration;\n    let ball_speed = this.state.ballSpeedX;\n    if (dir === 'left') acceleration = acceleration * -1;\n    if (dir === 'zero acceleration') acceleration = 0;\n    let x = this.state.xPos + ball_speed;\n    this.setState({\n      ballSpeedX: ball_speed + acceleration,\n      xPos: x\n    });\n  } //Checks when the arrow keys are pressed. 37 keycode is the left arrow key, for example.\n  //I can do this without using gameLoop() because I set up handleKeyDown as an EVENT LISTENER in the constructor.\n  //Google can explain event listeners in React.js better than I can.\n\n\n  handleKeyDown(event) {\n    switch (event.keyCode) {\n      case 37:\n        this.setState({\n          ballDirection: 'left'\n        });\n        break;\n\n      case 39:\n        this.setState({\n          ballDirection: 'right'\n        });\n        break;\n\n      default:\n    }\n\n    this.setState({\n      keyPressed: true\n    });\n  } //__________________________________________________________________________________________________________________________\n  //specially-named method that runs whenever we update props or components\n  //This is HTML. It is how we get the JAVA code we write to actually show up on screen.\n  //REACT is cool because it combines JAVA and HTML in this way. Normally, you write a website code in HTML...\n  //and if you want Java you have to use the <script> (JavaScript code) </script> tag\n\n\n  render() {\n    // If the user wins\n    if (this.state.isGameOver) {\n      return /*#__PURE__*/_jsxDEV(GameOver //define components\n      , {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this);\n    } else {\n      //Play the game\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"fill_screen\",\n          style: {\n            left: -1 * this.state.xPos\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"https://clipart.info/images/ccovers/1495749720Bowling-Ball-PNG-Clip-Art.png\",\n          style: {\n            height: this.state.ballSize,\n            top: this.state.yPos\n          },\n          id: \"ball-image\",\n          className: \"Ball\",\n          alt: \"ball\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\n\nexport default LineRiderGame;","map":{"version":3,"sources":["C:/Users/thatt/winter-project/the-app/src/Important Pages/LineRiderGame.js"],"names":["React","GameOver","LineRiderGame","Component","constructor","props","handleKeyDown","bind","state","yPos","xPos","ballDirection","timeoutId","gameLoopTimeout","ballSpeedY","ballSpeedX","gravity","xAcceleration","ballSize","keyPressed","bounced","isGameover","loggedIn","setName","componentDidMount","window","addEventListener","gameLoop","setTimeout","isGameOver","fall","changeDirection","setState","componentWillUnmount","clearTimeout","removeEventListener","grav","ball_speed","y","game_height","document","getElementById","clientHeight","moveSideways","dir","acceleration","x","event","keyCode","render","left","height","top"],"mappings":";;AAAA,OAAO,qBAAP;AACA,OAAO,cAAP,C,CAAsB;;AACtB,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,eAArB;;AAEA,MAAMC,aAAN,SAA4BF,KAAK,CAACG,SAAlC,CAA4C;AACxCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AAEA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB,CAHe,CAKf;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,GADG;AAETC,MAAAA,IAAI,EAAE,GAFG;AAGTC,MAAAA,aAAa,EAAE,EAHN;AAITC,MAAAA,SAAS,EAAE,CAJF;AAKTC,MAAAA,eAAe,EAAE,EALR;AAMTC,MAAAA,UAAU,EAAE,CANH;AAOTC,MAAAA,UAAU,EAAE,CAPH;AAQTC,MAAAA,OAAO,EAAE,CARA;AASTC,MAAAA,aAAa,EAAE,GATN;AAUTC,MAAAA,QAAQ,EAAE,EAVD;AAWTC,MAAAA,UAAU,EAAE,KAXH;AAYTC,MAAAA,OAAO,EAAE,KAZA;AAaTC,MAAAA,UAAU,EAAE,KAbH;AAcTC,MAAAA,QAAQ,EAAE,KAdD;AAeTC,MAAAA,OAAO,EAAE;AAfA,KAAb;AAiBH,GAxCuC,CA0CxC;AACA;;;AACAC,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmC,KAAKpB,aAAxC;AACA,SAAKqB,QAAL;AACH;;AAEDA,EAAAA,QAAQ,GAAG;AACP;AACA;AACA;AAEA,QAAIf,SAAS,GAAGgB,UAAU,CAAC,MAAM;AAAE;AAC/B,UAAI,CAAC,KAAKpB,KAAL,CAAWqB,UAAhB,EAA4B;AACxB;AACF,aAAKC,IAAL,GAF0B,CAEb;;AACb,aAAKC,eAAL;AACA,aAAKC,QAAL,CAAc;AAAEb,UAAAA,UAAU,EAAE,KAAd;AAAqBR,UAAAA,aAAa,EAAE;AAApC,SAAd;AACD;;AAED,WAAKgB,QAAL;AACD,KATuB,EASrB,KAAKnB,KAAL,CAAWK,eATU,CAA1B;AAWA,SAAKmB,QAAL,CAAc;AAAEpB,MAAAA;AAAF,KAAd;AACH,GAlEuC,CAoExC;;;AACAqB,EAAAA,oBAAoB,GAAG;AACnBC,IAAAA,YAAY,CAAC,KAAK1B,KAAL,CAAWI,SAAZ,CAAZ;AACAa,IAAAA,MAAM,CAACU,mBAAP,CAA2B,SAA3B,EAAsC,KAAK7B,aAA3C;AACH,GAxEuC,CA4ExC;AAIA;AACA;;;AACAwB,EAAAA,IAAI,GAAG;AACH,QAAIM,IAAI,GAAG,KAAK5B,KAAL,CAAWQ,OAAtB;AACA,QAAIqB,UAAU,GAAG,KAAK7B,KAAL,CAAWM,UAA5B;AACA,QAAIwB,CAAC,GAAG,KAAK9B,KAAL,CAAWC,IAAX,GAAkB4B,UAA1B;AACA,QAAIE,WAAW,GAAGC,QAAQ,CAACC,cAAT,CAAwB,aAAxB,EAAuCC,YAAvC,GAAsD,KAAKlC,KAAL,CAAWU,QAAjE,GAA4E,EAA9F;;AACA,QAAI,KAAKV,KAAL,CAAWC,IAAX,IAAmB8B,WAAnB,IAAkC,CAAC,KAAK/B,KAAL,CAAWY,OAAlD,EAA2D;AACvDiB,MAAAA,UAAU,IAAI,CAAC,CAAf;AACA,WAAKL,QAAL,CAAc;AAACZ,QAAAA,OAAO,EAAE;AAAV,OAAd;AACH;;AACD,QAAI,KAAKZ,KAAL,CAAWC,IAAX,GAAkB8B,WAAlB,IAAiC,KAAK/B,KAAL,CAAWY,OAAhD,EAAyD;AACrD,WAAKY,QAAL,CAAc;AAACZ,QAAAA,OAAO,EAAE;AAAV,OAAd;AACH;;AACD,SAAKY,QAAL,CAAc;AACVlB,MAAAA,UAAU,EAAEuB,UAAU,GAAGD,IADf;AAEV3B,MAAAA,IAAI,EAAE6B;AAFI,KAAd;AAGH,GAjGuC,CAmGxC;AACA;;;AACAP,EAAAA,eAAe,GAAG;AACd,YAAQ,KAAKvB,KAAL,CAAWG,aAAnB;AACE,WAAK,MAAL;AACI,aAAKgC,YAAL,CAAkB,MAAlB;AACF;;AACF,WAAK,OAAL;AACI,aAAKA,YAAL,CAAkB,OAAlB;AACA;;AACJ,WAAK,mBAAL;AACI,aAAKA,YAAL,CAAkB,mBAAlB;AACF;;AACF;AAVF;AAYH,GAlHuC,CAoHxC;;;AACAA,EAAAA,YAAY,CAACC,GAAD,EAAM;AACd,QAAIC,YAAY,GAAG,KAAKrC,KAAL,CAAWS,aAA9B;AACA,QAAIoB,UAAU,GAAG,KAAK7B,KAAL,CAAWO,UAA5B;AACA,QAAI6B,GAAG,KAAK,MAAZ,EACIC,YAAY,GAAGA,YAAY,GAAG,CAAC,CAA/B;AACJ,QAAID,GAAG,KAAK,mBAAZ,EACIC,YAAY,GAAG,CAAf;AACJ,QAAIC,CAAC,GAAG,KAAKtC,KAAL,CAAWE,IAAX,GAAkB2B,UAA1B;AACA,SAAKL,QAAL,CAAc;AACVjB,MAAAA,UAAU,EAAEsB,UAAU,GAAGQ,YADf;AAEVnC,MAAAA,IAAI,EAAEoC;AAFI,KAAd;AAIH,GAjIuC,CAmIxC;AACA;AACA;;;AACAxC,EAAAA,aAAa,CAACyC,KAAD,EAAQ;AACjB,YAAQA,KAAK,CAACC,OAAd;AACI,WAAK,EAAL;AACI,aAAKhB,QAAL,CAAc;AAAErB,UAAAA,aAAa,EAAE;AAAjB,SAAd;AACA;;AACJ,WAAK,EAAL;AACI,aAAKqB,QAAL,CAAc;AAAErB,UAAAA,aAAa,EAAE;AAAjB,SAAd;AACA;;AACJ;AAPJ;;AASA,SAAKqB,QAAL,CAAc;AACVb,MAAAA,UAAU,EAAE;AADF,KAAd;AAGH,GAnJuC,CAsJxC;AAGA;AACA;AACA;AACA;;;AACA8B,EAAAA,MAAM,GAAG;AACL;AACA,QAAI,KAAKzC,KAAL,CAAWqB,UAAf,EAA2B;AACvB,0BACI,QAAC,QAAD,CACI;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ;AAKH,KAND,MAOK;AAAE;AACH,0BACI;AAAA,gCACI;AAAK,UAAA,EAAE,EAAE,aAAT;AAAuB,UAAA,KAAK,EAAG;AAACqB,YAAAA,IAAI,EAAE,CAAC,CAAD,GAAG,KAAK1C,KAAL,CAAWE;AAArB;AAA/B;AAAA;AAAA;AAAA;AAAA,gBADJ,eAII;AAAK,UAAA,GAAG,EAAE,6EAAV;AACI,UAAA,KAAK,EAAG;AAACyC,YAAAA,MAAM,EAAE,KAAK3C,KAAL,CAAWU,QAApB;AACJkC,YAAAA,GAAG,EAAE,KAAK5C,KAAL,CAAWC;AADZ,WADZ;AAGI,UAAA,EAAE,EAAE,YAHR;AAII,UAAA,SAAS,EAAG,MAJhB;AAKI,UAAA,GAAG,EAAG;AALV;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAaH;AACJ;;AArLuC;;AAuL5C,eAAeP,aAAf","sourcesContent":["import './LineRiderGame.css'\r\nimport '../index.css' //I moved the intro page messages to this one so that they will move away with the background\r\nimport React from 'react'\r\nimport GameOver from './GameOver.js'\r\n\r\nclass LineRiderGame extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.handleKeyDown = this.handleKeyDown.bind(this)\r\n\r\n        //Quick JAVA/REACT variable usage tutorial:\r\n\r\n        //I use the terms method and function interchangably. Also, the term object just means something we created that follows the rules of a certain class.\r\n        //IN JAVA, you typically initialize a variable in the constructor, and create two methods (normally called \"setVariable()\" and \"getVariable()\" )...\r\n        //that can be used to change or access the variable's value at a later time. However, the variables in a CLASS's constructor can be used...\r\n        //inside ANY method in that CLASS as long as you say this.variable_name (\"this.\" points to the CLASS--LineRiderGame in this case)...\r\n        //If you were to not use \"this.\" , the code would try to find a variable called variable_name inside that METHOD. This is why \"this.\" is...\r\n        //so important. \r\n        //The reason we like setVariable() and getVariable() methods in Java is because what if we want to know the value of a variable from...\r\n        //an object of a DIFFERENT class? \"this.\" wouldn't work, because it wouldn't point to the right class. Well, with a getVariable() method...\r\n        //we could say \"object_name.getVariable()\" and it would work fine. \r\n\r\n        //HOWEVER, REACT IS A LITTLE DIFFERENT\r\n        //In React, in a class constructor, initialize variables inside \"this.state\" as shown below. Then, if we want to change the value of a variable,...\r\n        //to 2 just call this.setState = { variable: 2 }. If you read this code, you'll see how to use setState() to easily change multiple values at once.\r\n        //The downside is instead of using \"this.variable\" you have to use \"this.state.variable\"\r\n\r\n        this.state = {\r\n            yPos: 150,\r\n            xPos: 220,\r\n            ballDirection: '',\r\n            timeoutId: 0,\r\n            gameLoopTimeout: 50,\r\n            ballSpeedY: 0,\r\n            ballSpeedX: 0,\r\n            gravity: 2,\r\n            xAcceleration: 0.6,\r\n            ballSize: 40,\r\n            keyPressed: false,\r\n            bounced: false,\r\n            isGameover: false,\r\n            loggedIn: false,\r\n            setName: '',\r\n        }\r\n    }\r\n\r\n    //You can normally name methods whatever you want, but some names have been preset to do certain things\r\n    //This is specially-named method in REACT that will run immediately after LineRiderGame is created\r\n    componentDidMount() {\r\n        window.addEventListener('keydown', this.handleKeyDown)\r\n        this.gameLoop()\r\n    }\r\n\r\n    gameLoop() { \r\n        //by calling gameLoop() inside this method, it creates a loop... \r\n        //so we can constantly be updating object positions on the page...\r\n        //or check if the user is pressing a key\r\n\r\n        let timeoutId = setTimeout(() => { //timeouts will run everything in the first parameter after a certain amount of time (second parameter-gameLoopTimeout)\r\n            if (!this.state.isGameOver) {\r\n                //the user did selecte the difficulty, and the game is not over. This is the gameplay\r\n              this.fall()  //implements gravity\r\n              this.changeDirection()\r\n              this.setState({ keyPressed: false, ballDirection: 'zero acceleration' })\r\n            }\r\n      \r\n            this.gameLoop()\r\n          }, this.state.gameLoopTimeout)\r\n      \r\n        this.setState({ timeoutId })\r\n    }\r\n\r\n    //This is also a specially-named method\r\n    componentWillUnmount() {\r\n        clearTimeout(this.state.timeoutId)\r\n        window.removeEventListener('keydown', this.handleKeyDown)\r\n    }\r\n\r\n\r\n    \r\n    //EVERYTHING UNTIL THE NEXT LINE IS FOR BALL MOVEMENT______________________________________________________________________________\r\n\r\n\r\n\r\n    //gravity. document.getElementByID() is an extremely useful tool to access the properties of an HTML element.\r\n    //Check out the render() method to see what I'm talking about.\r\n    fall() {\r\n        let grav = this.state.gravity\r\n        let ball_speed = this.state.ballSpeedY\r\n        let y = this.state.yPos + ball_speed\r\n        let game_height = document.getElementById(\"fill_screen\").clientHeight - this.state.ballSize - 10\r\n        if (this.state.yPos >= game_height && !this.state.bounced) {\r\n            ball_speed *= -1\r\n            this.setState({bounced: true})\r\n        }\r\n        if (this.state.yPos < game_height && this.state.bounced) {\r\n            this.setState({bounced: false})\r\n        }\r\n        this.setState({\r\n            ballSpeedY: ball_speed + grav,\r\n            yPos: y})\r\n    }\r\n\r\n    //since it was called in gameLoop(), it will constantly be checking what the ballDirection is (left or right)\r\n    //switch and case is just a fancy way to get around using if and else if statements.\r\n    changeDirection() {\r\n        switch (this.state.ballDirection) {\r\n          case 'left':\r\n              this.moveSideways('left')\r\n            break\r\n          case 'right':\r\n              this.moveSideways('right')\r\n              break\r\n          case 'zero acceleration':\r\n              this.moveSideways('zero acceleration')\r\n            break\r\n          default:\r\n        }\r\n    }\r\n\r\n    //essentially gravity in the sideways direction\r\n    moveSideways(dir) {\r\n        let acceleration = this.state.xAcceleration\r\n        let ball_speed = this.state.ballSpeedX\r\n        if (dir === 'left')\r\n            acceleration = acceleration * -1\r\n        if (dir === 'zero acceleration')\r\n            acceleration = 0;\r\n        let x = this.state.xPos + ball_speed\r\n        this.setState({\r\n            ballSpeedX: ball_speed + acceleration,\r\n            xPos: x\r\n        })\r\n    }\r\n\r\n    //Checks when the arrow keys are pressed. 37 keycode is the left arrow key, for example.\r\n    //I can do this without using gameLoop() because I set up handleKeyDown as an EVENT LISTENER in the constructor.\r\n    //Google can explain event listeners in React.js better than I can.\r\n    handleKeyDown(event) {\r\n        switch (event.keyCode) {\r\n            case 37:\r\n                this.setState({ ballDirection: 'left' })\r\n                break\r\n            case 39:\r\n                this.setState({ ballDirection: 'right' })\r\n                break\r\n            default:\r\n        }\r\n        this.setState({\r\n            keyPressed: true\r\n        })\r\n    }\r\n    \r\n\r\n    //__________________________________________________________________________________________________________________________\r\n\r\n    \r\n    //specially-named method that runs whenever we update props or components\r\n    //This is HTML. It is how we get the JAVA code we write to actually show up on screen.\r\n    //REACT is cool because it combines JAVA and HTML in this way. Normally, you write a website code in HTML...\r\n    //and if you want Java you have to use the <script> (JavaScript code) </script> tag\r\n    render() {\r\n        // If the user wins\r\n        if (this.state.isGameOver) {\r\n            return (\r\n                <GameOver\r\n                    //define components\r\n                />\r\n            )\r\n        }\r\n        else { //Play the game\r\n            return(\r\n                <div>\r\n                    <div id= \"fill_screen\" style= {{left: -1*this.state.xPos}}> \r\n                        \r\n                    </div>\r\n                    <img src= \"https://clipart.info/images/ccovers/1495749720Bowling-Ball-PNG-Clip-Art.png\"\r\n                        style= {{height: this.state.ballSize, \r\n                            top: this.state.yPos}} \r\n                        id= \"ball-image\"\r\n                        className = 'Ball'\r\n                        alt = \"ball\"/>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\nexport default LineRiderGame;"]},"metadata":{},"sourceType":"module"}