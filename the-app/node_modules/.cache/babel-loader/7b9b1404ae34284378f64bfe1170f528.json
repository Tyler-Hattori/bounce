{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\thatt\\\\winter-project\\\\the-app\\\\src\\\\Important Pages\\\\LineRiderGame.js\";\nimport './LineRiderGame.css';\nimport React from 'react';\nimport GameOver from './GameOver.js';\nimport Ball from '../Components/Ball';\nimport Tile from '../Components/Tile';\nimport tileImage from '../Backgrounds/tile.jpg';\n\nclass LineRiderGame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.state = {\n      yPos: 150,\n      xPos: 0,\n      ballDirection: '',\n      timeoutId: 0,\n      gameLoopTimeout: 50,\n      ballSpeedY: 0,\n      ballSpeedX: 0,\n      maxSpeed: 30,\n      gravity: props.difficulty / 2,\n      xAcceleration: 4,\n      ballSize: 40,\n      keyPressed: false,\n      bounced: false,\n      isGameover: false,\n      loggedIn: false,\n      setName: '',\n      attempts: 1,\n      difficulty: props.difficulty\n    };\n  }\n\n  componentDidMount() {\n    this.tiles = [];\n    this.tilesTemp = [];\n    this.initiateTiles();\n    window.addEventListener('keydown', this.handleKeyDown);\n    this.gameLoop();\n  }\n\n  initiateTiles() {\n    this.tiles.push( /*#__PURE__*/_jsxDEV(Tile, {\n      image: tileImage,\n      height: 100,\n      xPos: 800,\n      yPos: document.getElementById(\"fill_screen\").clientHeight - 50\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 25\n    }, this));\n\n    for (let j = 0; j < 2; j++) {\n      let tileCount = 8 - Math.floor(Math.random() * this.state.difficulty);\n\n      for (let i = 0; i < tileCount; i++) {\n        let x = j * 800 + Math.floor(Math.random() * 8) * 100;\n        let y = document.getElementById(\"fill_screen\").clientHeight - 50;\n        this.tiles.push( /*#__PURE__*/_jsxDEV(Tile, {\n          image: tileImage,\n          height: 100,\n          xPos: x,\n          yPos: y\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 33\n        }, this));\n      }\n    }\n\n    this.tilesTemp = this.tiles;\n  }\n\n  resetGame() {\n    let attempts = this.state.attempts;\n    this.tiles = [];\n    this.initiateTiles();\n    this.setState({\n      xPos: 0,\n      yPos: 150,\n      ballDirection: '',\n      timeoutId: 0,\n      ballSpeedY: 0,\n      ballSpeedX: 0,\n      keyPressed: false,\n      bounced: false,\n      attempts: attempts + 1\n    });\n  }\n\n  createGround() {\n    let ground = this.tiles;\n    this.tiles = [];\n    this.tilesTemp = [];\n    let tileCount = 8 - Math.floor(Math.random() * this.state.difficulty);\n\n    for (let i = 0; i < tileCount; i++) {\n      let x = this.state.xPos / 800 * 800 + 1600 + Math.floor(Math.random() * 8) * 100;\n      let y = document.getElementById(\"fill_screen\").clientHeight - 50;\n      this.tiles.push( /*#__PURE__*/_jsxDEV(Tile, {\n        image: tileImage,\n        height: 100,\n        xPos: x,\n        yPos: y\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 29\n      }, this));\n    }\n\n    this.tilesTemp = this.tiles;\n    this.tiles.push(ground);\n  }\n\n  gameLoop() {\n    let timeoutId = setTimeout(() => {\n      if (!this.state.isGameOver) {\n        if (this.state.xPos % 800 <= this.state.ballSpeedX / 2 && this.state.xPos > 0) this.createGround();\n        this.changeDirection();\n        if (this.state.yPos > document.getElementById(\"fill_screen\").clientHeight) this.resetGame();\n        this.setState({\n          keyPressed: false,\n          ballDirection: 'zero acceleration'\n        });\n        this.fall();\n      }\n\n      this.gameLoop();\n    }, this.state.gameLoopTimeout);\n    this.setState({\n      timeoutId\n    });\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.state.timeoutId);\n    window.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  fall() {\n    let grav = this.state.gravity;\n    let ball_speed = this.state.ballSpeedY;\n    let y = this.state.yPos + ball_speed;\n\n    if (this.isThereCollision() && !this.state.bounced) {\n      ball_speed *= -1;\n      this.setState({\n        bounced: true\n      });\n    }\n\n    if (!this.isThereCollision() && this.state.bounced) {\n      this.setState({\n        bounced: false\n      });\n    }\n\n    this.setState({\n      ballSpeedY: ball_speed + grav,\n      yPos: y\n    });\n  }\n\n  isThereCollision() {\n    let ball = {\n      x: this.state.xPos + this.state.ballSize / 2,\n      y: this.state.yPos + this.state.ballSize + this.state.ballSpeedY * 7 / 4,\n      width: this.state.ballSize,\n      height: this.state.ballSize\n    };\n    let collided = this.tilesTemp.find(a => {\n      //if (a.props === undefined)\n      //  return false\n      let tile = {\n        x: a.props.xPos - 800,\n        y: a.props.yPos,\n        width: a.props.height,\n        height: a.props.height\n      };\n      if (ball.x < tile.x + tile.width && ball.x > tile.x && ball.y >= tile.y) return true;\n      return false;\n    });\n    return collided;\n  }\n\n  changeDirection() {\n    switch (this.state.ballDirection) {\n      case 'left':\n        this.moveSideways('left');\n        break;\n\n      case 'right':\n        this.moveSideways('right');\n        break;\n\n      case 'zero acceleration':\n        this.moveSideways('zero acceleration');\n        break;\n\n      default:\n    }\n  }\n\n  moveSideways(dir) {\n    let acceleration = this.state.xAcceleration;\n    let ball_speed = this.state.ballSpeedX;\n    if (dir === 'left') acceleration = acceleration * -1;\n    if (dir === 'zero acceleration') acceleration = 0;\n    if (ball_speed < this.state.maxSpeed && ball_speed > this.state.maxSpeed * -1 || ball_speed >= this.state.maxSpeed && acceleration < 0 || ball_speed <= this.state.maxSpeed * -1 && acceleration > 0) ball_speed += acceleration;\n    let x = this.state.xPos + ball_speed;\n    this.setState({\n      ballSpeedX: ball_speed,\n      xPos: x\n    });\n  }\n\n  handleKeyDown(event) {\n    switch (event.keyCode) {\n      case 37:\n        this.setState({\n          ballDirection: 'left'\n        });\n        break;\n\n      case 39:\n        this.setState({\n          ballDirection: 'right'\n        });\n        break;\n\n      default:\n    }\n\n    this.setState({\n      keyPressed: true\n    });\n  }\n\n  render() {\n    if (this.state.isGameOver) {\n      return /*#__PURE__*/_jsxDEV(GameOver, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"background\",\n          style: {\n            left: -1 * this.state.xPos / 2\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"fill_screen\",\n          style: {\n            left: -1 * this.state.xPos\n          },\n          children: [this.tiles, /*#__PURE__*/_jsxDEV(Ball, {\n            xPos: 800 + this.state.xPos,\n            yPos: this.state.yPos,\n            height: this.state.ballSize\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"colored_text\",\n            style: {\n              left: -1 * this.state.xPos\n            },\n            children: [\"Attempt: \", this.state.attempts]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\n\nexport default LineRiderGame;","map":{"version":3,"sources":["C:/Users/thatt/winter-project/the-app/src/Important Pages/LineRiderGame.js"],"names":["React","GameOver","Ball","Tile","tileImage","LineRiderGame","Component","constructor","props","handleKeyDown","bind","state","yPos","xPos","ballDirection","timeoutId","gameLoopTimeout","ballSpeedY","ballSpeedX","maxSpeed","gravity","difficulty","xAcceleration","ballSize","keyPressed","bounced","isGameover","loggedIn","setName","attempts","componentDidMount","tiles","tilesTemp","initiateTiles","window","addEventListener","gameLoop","push","document","getElementById","clientHeight","j","tileCount","Math","floor","random","i","x","y","resetGame","setState","createGround","ground","setTimeout","isGameOver","changeDirection","fall","componentWillUnmount","clearTimeout","removeEventListener","grav","ball_speed","isThereCollision","ball","width","height","collided","find","a","tile","moveSideways","dir","acceleration","event","keyCode","render","left"],"mappings":"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","sourcesContent":["import './LineRiderGame.css'\r\nimport React from 'react'\r\nimport GameOver from './GameOver.js'\r\nimport Ball from '../Components/Ball'\r\nimport Tile from '../Components/Tile'\r\nimport tileImage from '../Backgrounds/tile.jpg'\r\n\r\nclass LineRiderGame extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        \r\n        this.handleKeyDown = this.handleKeyDown.bind(this)\r\n\r\n        this.state = {\r\n            yPos: 150,\r\n            xPos: 0,\r\n            ballDirection: '',\r\n            timeoutId: 0,\r\n            gameLoopTimeout: 50,\r\n            ballSpeedY: 0,\r\n            ballSpeedX: 0,\r\n            maxSpeed: 30,\r\n            gravity: props.difficulty/2,\r\n            xAcceleration: 4,\r\n            ballSize: 40,\r\n            keyPressed: false,\r\n            bounced: false,\r\n            isGameover: false,\r\n            loggedIn: false,\r\n            setName: '',\r\n            attempts: 1,\r\n            difficulty: props.difficulty,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.tiles = []\r\n        this.tilesTemp = []\r\n        this.initiateTiles()\r\n        window.addEventListener('keydown', this.handleKeyDown)\r\n        this.gameLoop()\r\n    }\r\n\r\n    initiateTiles() {\r\n        this.tiles.push(<Tile image={tileImage} height= {100} xPos={800} yPos={document.getElementById(\"fill_screen\").clientHeight - 50}/>)\r\n        for (let j = 0; j < 2; j++) {\r\n            let tileCount = 8 - Math.floor(Math.random() * (this.state.difficulty))\r\n            for (let i = 0; i < tileCount; i++) {\r\n                let x = (j*800) + Math.floor(Math.random() * 8) * 100\r\n                let y = document.getElementById(\"fill_screen\").clientHeight - 50            \r\n                \r\n                this.tiles.push(<Tile image={tileImage} height= {100} xPos={x} yPos={y}/>)\r\n            }\r\n        }\r\n        this.tilesTemp = this.tiles\r\n    }\r\n\r\n    resetGame() {\r\n        let attempts = this.state.attempts\r\n        this.tiles= []\r\n        this.initiateTiles()\r\n        this.setState({\r\n            xPos: 0,\r\n            yPos: 150,\r\n            ballDirection: '',\r\n            timeoutId: 0,\r\n            ballSpeedY: 0,\r\n            ballSpeedX: 0,\r\n            keyPressed: false,\r\n            bounced: false,\r\n            attempts: attempts + 1,\r\n        })\r\n    }\r\n\r\n    createGround() {\r\n        let ground = this.tiles\r\n        this.tiles = []\r\n        this.tilesTemp = []\r\n        let tileCount = 8 - Math.floor(Math.random() * (this.state.difficulty))\r\n        for (let i = 0; i < tileCount; i++) {\r\n            let x = (this.state.xPos/800)*800 + 1600 + Math.floor(Math.random() * 8) * 100\r\n            let y = document.getElementById(\"fill_screen\").clientHeight - 50            \r\n            \r\n            this.tiles.push(<Tile image={tileImage} height= {100} xPos={x} yPos={y}/>)\r\n        }\r\n        this.tilesTemp = this.tiles\r\n        this.tiles.push(ground)\r\n    }\r\n\r\n    gameLoop() { \r\n\r\n        let timeoutId = setTimeout(() => {\r\n            if (!this.state.isGameOver) {\r\n              if (this.state.xPos % 800 <= this.state.ballSpeedX/2 && this.state.xPos > 0)\r\n                this.createGround()\r\n              this.changeDirection()\r\n              if (this.state.yPos > document.getElementById(\"fill_screen\").clientHeight)\r\n                this.resetGame()\r\n              this.setState({ keyPressed: false, ballDirection: 'zero acceleration' })\r\n              this.fall()\r\n            }\r\n      \r\n            this.gameLoop()\r\n          }, this.state.gameLoopTimeout)\r\n      \r\n        this.setState({ timeoutId })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.state.timeoutId)\r\n        window.removeEventListener('keydown', this.handleKeyDown)\r\n    }\r\n\r\n    fall() {\r\n        let grav = this.state.gravity\r\n        let ball_speed = this.state.ballSpeedY\r\n        let y = this.state.yPos + ball_speed\r\n        if (this.isThereCollision() && !this.state.bounced) {\r\n            ball_speed *= -1\r\n            this.setState({bounced: true})\r\n        }\r\n        if (!this.isThereCollision() && this.state.bounced) {\r\n            this.setState({bounced: false})\r\n        }\r\n        this.setState({\r\n            ballSpeedY: ball_speed + grav,\r\n            yPos: y})\r\n    }\r\n\r\n    isThereCollision() {\r\n        let ball = {x: this.state.xPos + this.state.ballSize/2, y: this.state.yPos + this.state.ballSize + this.state.ballSpeedY*7/4, \r\n                    width: this.state.ballSize, height: this.state.ballSize}\r\n        let collided = this.tilesTemp.find(a => {\r\n            //if (a.props === undefined)\r\n              //  return false\r\n            let tile = {x: a.props.xPos - 800, y: a.props.yPos, width: a.props.height, height: a.props.height}\r\n            if (ball.x < tile.x + tile.width && ball.x > tile.x &&\r\n                ball.y >= tile.y)\r\n                return true\r\n            return false\r\n        })\r\n\r\n        return collided\r\n    }\r\n\r\n    changeDirection() {\r\n        switch (this.state.ballDirection) {\r\n          case 'left':\r\n              this.moveSideways('left')\r\n            break\r\n          case 'right':\r\n              this.moveSideways('right')\r\n              break\r\n          case 'zero acceleration':\r\n              this.moveSideways('zero acceleration')\r\n            break\r\n          default:\r\n        }\r\n    }\r\n\r\n    moveSideways(dir) {\r\n        let acceleration = this.state.xAcceleration\r\n        let ball_speed = this.state.ballSpeedX\r\n        if (dir === 'left')\r\n            acceleration = acceleration * -1\r\n        if (dir === 'zero acceleration')\r\n            acceleration = 0\r\n        if ((ball_speed < this.state.maxSpeed && ball_speed > this.state.maxSpeed*-1)\r\n            || (ball_speed >= this.state.maxSpeed && acceleration < 0) || (ball_speed <= this.state.maxSpeed*-1 && acceleration > 0))\r\n            ball_speed += acceleration\r\n        let x = this.state.xPos + ball_speed\r\n        this.setState({\r\n            ballSpeedX: ball_speed,\r\n            xPos: x\r\n        })\r\n    }\r\n\r\n    handleKeyDown(event) {\r\n        switch (event.keyCode) {\r\n            case 37:\r\n                this.setState({ ballDirection: 'left' })\r\n                break\r\n            case 39:\r\n                this.setState({ ballDirection: 'right' })\r\n                break\r\n            default:\r\n        }\r\n        this.setState({\r\n            keyPressed: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isGameOver) {\r\n            return (\r\n                <GameOver/>\r\n            )\r\n        }\r\n        else {\r\n            return(\r\n                <div>\r\n                    <div id = \"background\" style= {{left: -1*this.state.xPos/2}}/>\r\n                    <div id= \"fill_screen\" style= {{left: -1*this.state.xPos}}>\r\n                        {this.tiles}\r\n                        <Ball xPos= {800 + this.state.xPos}\r\n                        yPos={this.state.yPos}\r\n                        height={this.state.ballSize}/>\r\n                        <p className= \"colored_text\" style= {{left: -1*this.state.xPos}}>Attempt: {this.state.attempts}</p>\r\n                    </div>\r\n                    \r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\nexport default LineRiderGame\r\n"]},"metadata":{},"sourceType":"module"}