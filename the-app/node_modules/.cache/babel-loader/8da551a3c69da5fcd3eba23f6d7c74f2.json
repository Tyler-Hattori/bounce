{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\thatt\\\\winter-project\\\\the-app\\\\src\\\\LineRiderGame.js\";\nimport './LineRiderGame.css';\nimport React from 'react';\nimport GameOver from './GameOver.js';\n\nclass LineRiderGame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.state = {\n      yPos: 150,\n      timeoutId: 0,\n      gameLoopTimeout: 50,\n      ballSpeed: 0,\n      gravity: 0.0,\n      ballSize: 40,\n      isGameover: false\n    };\n  } //runs immediately after LineRiderGame is created\n\n\n  componentDidMount() {\n    this.startGame();\n    window.addEventListener('keydown', this.handleKeyDown);\n    this.gameLoop();\n  }\n\n  startGame() {\n    //Game\n    //Ball \n    this.setState({});\n  }\n\n  gameLoop() {\n    let timeoutId = setTimeout(() => {\n      if (!this.state.isGameOver) {\n        this.fall();\n        this.bounce();\n      }\n\n      this.gameLoop();\n    }, this.state.gameLoopTimeout);\n    this.setState({\n      timeoutId\n    });\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.state.timeoutId);\n    window.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  fall() {\n    let grav = this.state.gravity;\n    let ball_speed = this.state.ballSpeed;\n    let y = this.state.yPos + ball_speed;\n    this.setState({\n      ballSpeed: ball_speed + grav,\n      yPos: y\n    });\n  }\n\n  bounce() {\n    let grav = this.state.gravity * -1;\n    alert(document.getElementById(\"fill_screen\").bottom);\n\n    if (this.state.yPos >= document.getElementById(\"fill_screen\").height) {\n      this.setState({\n        gravity: grav\n      });\n    }\n  }\n\n  resetGame() {\n    //reset the Game\n    //reset the Ball position\n    this.setState({});\n  }\n\n  handleKeyDown(event) {\n    // if mouse is pressed\n    this.setState({});\n  } //runs when we update props or components\n\n\n  render() {\n    // If the run was a success\n    if (this.state.isGameOver) {\n      return /*#__PURE__*/_jsxDEV(GameOver //define components\n      , {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"fill_screen\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"https://clipart.info/images/ccovers/1495749720Bowling-Ball-PNG-Clip-Art.png\",\n        style: {\n          height: this.state.ballSize,\n          top: this.state.yPos\n        },\n        id: \"ball-image\",\n        className: \"Ball\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default LineRiderGame;","map":{"version":3,"sources":["C:/Users/thatt/winter-project/the-app/src/LineRiderGame.js"],"names":["React","GameOver","LineRiderGame","Component","constructor","props","handleKeyDown","bind","state","yPos","timeoutId","gameLoopTimeout","ballSpeed","gravity","ballSize","isGameover","componentDidMount","startGame","window","addEventListener","gameLoop","setState","setTimeout","isGameOver","fall","bounce","componentWillUnmount","clearTimeout","removeEventListener","grav","ball_speed","y","alert","document","getElementById","bottom","height","resetGame","event","render","top"],"mappings":"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","sourcesContent":["import './LineRiderGame.css'\r\nimport React from 'react'\r\nimport GameOver from './GameOver.js'\r\n\r\nclass LineRiderGame extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n    this.handleKeyDown = this.handleKeyDown.bind(this)\r\n\r\n        this.state = {\r\n            yPos: 150,\r\n            timeoutId: 0,\r\n            gameLoopTimeout: 50,\r\n            ballSpeed: 0,\r\n            gravity: 0.0,\r\n            ballSize: 40,\r\n            isGameover: false,\r\n        }\r\n    }\r\n\r\n    //runs immediately after LineRiderGame is created\r\n    componentDidMount() {\r\n        this.startGame()\r\n        window.addEventListener('keydown', this.handleKeyDown)\r\n        this.gameLoop()\r\n    }\r\n\r\n    startGame() {\r\n        //Game\r\n        //Ball \r\n        this.setState ({\r\n        })\r\n    }\r\n\r\n    gameLoop() {\r\n        let timeoutId = setTimeout(() => {\r\n            if (!this.state.isGameOver) {\r\n              this.fall()\r\n              this.bounce()\r\n            }\r\n      \r\n            this.gameLoop()\r\n          }, this.state.gameLoopTimeout)\r\n      \r\n        this.setState({ timeoutId })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.state.timeoutId)\r\n        window.removeEventListener('keydown', this.handleKeyDown)\r\n    }\r\n\r\n    fall() {\r\n        let grav = this.state.gravity\r\n        let ball_speed = this.state.ballSpeed\r\n        let y = this.state.yPos + ball_speed\r\n        this.setState({\r\n            ballSpeed: ball_speed + grav,\r\n            yPos: y})\r\n    }\r\n\r\n    bounce() {\r\n        let grav = this.state.gravity * -1\r\n        alert(document.getElementById(\"fill_screen\").bottom)\r\n        if (this.state.yPos >= document.getElementById(\"fill_screen\").height) {\r\n            this.setState({\r\n                gravity: grav\r\n            })\r\n        }\r\n    }\r\n\r\n    resetGame() {\r\n        //reset the Game\r\n        //reset the Ball position\r\n\r\n        this.setState({\r\n            \r\n        })\r\n    }\r\n\r\n    handleKeyDown(event) {\r\n        // if mouse is pressed\r\n\r\n\r\n        this.setState({\r\n\r\n        })\r\n      }\r\n\r\n    //runs when we update props or components\r\n    render() {\r\n        // If the run was a success\r\n        if (this.state.isGameOver) {\r\n            return (\r\n                <GameOver\r\n                    //define components\r\n                />\r\n            )\r\n        }\r\n\r\n        return(\r\n            <div id = \"fill_screen\">\r\n                <img src= \"https://clipart.info/images/ccovers/1495749720Bowling-Ball-PNG-Clip-Art.png\"\r\n                    style= {{height: this.state.ballSize, top: this.state.yPos}} \r\n                    id= \"ball-image\"\r\n                    className = 'Ball'/>            \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default LineRiderGame;"]},"metadata":{},"sourceType":"module"}