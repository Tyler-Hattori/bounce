{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\thatt\\\\winter-project\\\\the-app\\\\src\\\\LineRiderGame.js\";\nimport './LineRiderGame.css';\nimport React from 'react';\nimport GameOver from './GameOver.js';\n\nclass LineRiderGame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.state = {\n      yPos: 150,\n      xPos: 50,\n      ballDirection: '',\n      timeoutId: 0,\n      gameLoopTimeout: 50,\n      ballSpeedY: 0,\n      ballSpeedX: 0,\n      gravity: 1.7,\n      xAcceleration: 4,\n      ballSize: 40,\n      bounced: false,\n      isGameover: false\n    };\n  } //runs immediately after LineRiderGame is created\n\n\n  componentDidMount() {\n    this.startGame();\n    window.addEventListener('keydown', this.handleKeyDown);\n    this.gameLoop();\n  }\n\n  startGame() {\n    //Game\n    //Ball \n    this.setState({});\n  }\n\n  gameLoop() {\n    let timeoutId = setTimeout(() => {\n      if (!this.state.isGameOver) {\n        this.fall();\n        this.changeDirection();\n        this.moveSideways();\n      }\n\n      this.gameLoop();\n    }, this.state.gameLoopTimeout);\n    this.setState({\n      timeoutId\n    });\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.state.timeoutId);\n    window.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  fall() {\n    let grav = this.state.gravity;\n    let ball_speed = this.state.ballSpeedY;\n    let y = this.state.yPos + ball_speed;\n    let game_height = document.getElementById(\"fill_screen\").clientHeight - this.state.ballSize - 10;\n\n    if (this.state.yPos >= game_height && !this.state.bounced) {\n      ball_speed *= -1;\n      this.setState({\n        bounced: true\n      });\n    }\n\n    if (this.state.yPos < game_height && this.state.bounced) {\n      this.setState({\n        bounced: false\n      });\n    }\n\n    this.setState({\n      ballSpeedY: ball_speed + grav,\n      yPos: y\n    });\n  }\n\n  changeDirection() {\n    switch (this.state.ballDirection) {\n      case 'left':\n        break;\n\n      case 'right':\n        break;\n\n      default:\n    }\n  }\n\n  moveSideways() {\n    let acceleration = this.state.xAcceleration;\n    let ball_speed = this.state.ballSpeedX;\n    let x = this.state.xPos + ball_speed;\n    this.setState({\n      ballSpeedX: ball_speed + acceleration,\n      xPos: x\n    });\n  }\n\n  resetGame() {\n    //reset the Game\n    //reset the Ball position\n    this.setState({});\n  }\n\n  handleKeyDown(event) {\n    switch (event.keyCode) {\n      case 37:\n        this.setState({\n          ballDirection: 'left'\n        });\n\n      case 68:\n        this.setState({\n          ballDirection: 'right'\n        });\n    }\n  } //runs when we update props or components\n\n\n  render() {\n    // If the run was a success\n    if (this.state.isGameOver) {\n      return /*#__PURE__*/_jsxDEV(GameOver //define components\n      , {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"fill_screen\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"https://clipart.info/images/ccovers/1495749720Bowling-Ball-PNG-Clip-Art.png\",\n        style: {\n          height: this.state.ballSize,\n          top: this.state.yPos\n        },\n        id: \"ball-image\",\n        className: \"Ball\",\n        alt: \"ball image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default LineRiderGame;","map":{"version":3,"sources":["C:/Users/thatt/winter-project/the-app/src/LineRiderGame.js"],"names":["React","GameOver","LineRiderGame","Component","constructor","props","handleKeyDown","bind","state","yPos","xPos","ballDirection","timeoutId","gameLoopTimeout","ballSpeedY","ballSpeedX","gravity","xAcceleration","ballSize","bounced","isGameover","componentDidMount","startGame","window","addEventListener","gameLoop","setState","setTimeout","isGameOver","fall","changeDirection","moveSideways","componentWillUnmount","clearTimeout","removeEventListener","grav","ball_speed","y","game_height","document","getElementById","clientHeight","acceleration","x","resetGame","event","keyCode","render","height","top"],"mappings":"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","sourcesContent":["import './LineRiderGame.css'\r\nimport React from 'react'\r\nimport GameOver from './GameOver.js'\r\n\r\nclass LineRiderGame extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n    this.handleKeyDown = this.handleKeyDown.bind(this)\r\n\r\n        this.state = {\r\n            yPos: 150,\r\n            xPos: 50,\r\n            ballDirection: '',\r\n            timeoutId: 0,\r\n            gameLoopTimeout: 50,\r\n            ballSpeedY: 0,\r\n            ballSpeedX: 0,\r\n            gravity: 1.7,\r\n            xAcceleration: 4,\r\n            ballSize: 40,\r\n            bounced: false,\r\n            isGameover: false,\r\n        }\r\n    }\r\n\r\n    //runs immediately after LineRiderGame is created\r\n    componentDidMount() {\r\n        this.startGame()\r\n        window.addEventListener('keydown', this.handleKeyDown)\r\n        this.gameLoop()\r\n    }\r\n\r\n    startGame() {\r\n        //Game\r\n        //Ball \r\n        this.setState ({\r\n        })\r\n    }\r\n\r\n    gameLoop() {\r\n        let timeoutId = setTimeout(() => {\r\n            if (!this.state.isGameOver) {\r\n              this.fall()\r\n              this.changeDirection()\r\n              this.moveSideways()\r\n            }\r\n      \r\n            this.gameLoop()\r\n          }, this.state.gameLoopTimeout)\r\n      \r\n        this.setState({ timeoutId })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.state.timeoutId)\r\n        window.removeEventListener('keydown', this.handleKeyDown)\r\n    }\r\n\r\n    fall() {\r\n        let grav = this.state.gravity\r\n        let ball_speed = this.state.ballSpeedY\r\n        let y = this.state.yPos + ball_speed\r\n        let game_height = document.getElementById(\"fill_screen\").clientHeight - this.state.ballSize - 10\r\n        if (this.state.yPos >= game_height && !this.state.bounced) {\r\n            ball_speed *= -1\r\n            this.setState({bounced: true})\r\n        }\r\n        if (this.state.yPos < game_height && this.state.bounced) {\r\n            this.setState({bounced: false})\r\n        }\r\n        this.setState({\r\n            ballSpeedY: ball_speed + grav,\r\n            yPos: y})\r\n    }\r\n\r\n    changeDirection() {\r\n        switch (this.state.ballDirection) {\r\n          case 'left':\r\n            break\r\n          case 'right':\r\n            break\r\n          default:\r\n            \r\n        }\r\n    }\r\n\r\n    moveSideways() {\r\n        let acceleration = this.state.xAcceleration\r\n        let ball_speed = this.state.ballSpeedX\r\n        let x = this.state.xPos + ball_speed\r\n        this.setState({\r\n            ballSpeedX: ball_speed + acceleration,\r\n            xPos: x\r\n        })\r\n    }\r\n\r\n    resetGame() {\r\n        //reset the Game\r\n        //reset the Ball position\r\n\r\n        this.setState({\r\n            \r\n        })\r\n    }\r\n\r\n    handleKeyDown(event) {\r\n        switch (event.keyCode) {\r\n            case 37:\r\n                this.setState({ ballDirection: 'left' })\r\n            case 68:\r\n                this.setState({ ballDirection: 'right' })\r\n        }\r\n      }\r\n\r\n    //runs when we update props or components\r\n    render() {\r\n        // If the run was a success\r\n        if (this.state.isGameOver) {\r\n            return (\r\n                <GameOver\r\n                    //define components\r\n                />\r\n            )\r\n        }\r\n\r\n        return(\r\n            <div id = \"fill_screen\">\r\n                <img src= \"https://clipart.info/images/ccovers/1495749720Bowling-Ball-PNG-Clip-Art.png\"\r\n                    style= {{height: this.state.ballSize, top: this.state.yPos}} \r\n                    id= \"ball-image\"\r\n                    className = 'Ball'\r\n                    alt = \"ball image\"/>            \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default LineRiderGame;"]},"metadata":{},"sourceType":"module"}