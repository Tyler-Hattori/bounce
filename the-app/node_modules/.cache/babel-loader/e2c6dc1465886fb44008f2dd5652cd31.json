{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\thatt\\\\winter-project\\\\the-app\\\\src\\\\Important Pages\\\\LineRiderGame.js\";\nimport './LineRiderGame.css';\nimport React from 'react';\nimport GameOver from './GameOver.js';\nimport Ball from '../Components/Ball';\nimport Tile from '../Components/Tile';\nimport QuestionBox from '../Components/QuestionBox';\nimport QBoxHandling from '../Components/Images/question_box_handling.png';\n\nclass LineRiderGame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.state = {\n      yPos: 150,\n      xPos: 0,\n      ballDirection: '',\n      timeoutId: 0,\n      gameLoopTimeout: 50,\n      ballSpeedY: 0,\n      ballSpeedX: 0,\n      maxSpeed: 30,\n      gravity: props.difficulty / 2,\n      xAcceleration: 4,\n      ballSize: 40,\n      keyPressed: false,\n      bounced: false,\n      isGameover: false,\n      loggedIn: false,\n      setName: '',\n      attempts: 1,\n      difficulty: props.difficulty,\n      background: props.background,\n      collidedObj: /*#__PURE__*/_jsxDEV(Tile, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 26\n      }, this),\n      qboxanim: false\n    };\n    this.setElementPropabilities(props.diffculty);\n  }\n\n  setElementPropabilities(difficulty) {\n    switch (difficulty) {\n      case \"plebian\":\n        this.setState({});\n        break;\n\n      case \"easy\":\n        break;\n\n      case \"medium\":\n        break;\n\n      case \"hard\":\n        break;\n\n      case \"expert\":\n        break;\n    }\n  }\n\n  componentDidMount() {\n    this.obstacles = [];\n    this.obstacles.push( /*#__PURE__*/_jsxDEV(QuestionBox, {\n      height: 50,\n      yPos: 300,\n      xPos: this.state.xPos + 800 + 200\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 29\n    }, this));\n    this.usedTileSpawningPoints = [];\n    this.initiateTiles();\n    window.addEventListener('keydown', this.handleKeyDown);\n    this.gameLoop();\n  }\n\n  initiateTiles() {\n    this.obstacles.push( /*#__PURE__*/_jsxDEV(Tile, {\n      height: 100,\n      xPos: 800,\n      yPos: document.getElementById(\"fill_screen\").clientHeight - 50\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 29\n    }, this));\n\n    for (let j = 0; j < 10 * this.state.difficulty; j++) {\n      this.usedTileSpawningPoints.push(j);\n      let tileCount = 8 - Math.floor(Math.random() * this.state.difficulty);\n\n      for (let i = 0; i < tileCount; i++) {\n        let x = j * 800 + Math.floor(Math.random() * 8) * 100;\n        let y = document.getElementById(\"fill_screen\").clientHeight - 50;\n        this.obstacles.push( /*#__PURE__*/_jsxDEV(Tile, {\n          height: 100,\n          xPos: x,\n          yPos: y\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 37\n        }, this));\n      }\n    }\n  }\n\n  resetGame() {\n    let attempts = this.state.attempts;\n    this.obstacles = [];\n    this.obstacles.push( /*#__PURE__*/_jsxDEV(QuestionBox, {\n      height: 50,\n      yPos: 300,\n      xPos: 800 + 200\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 29\n    }, this));\n    this.usedTileSpawningPoints = [];\n    this.initiateTiles();\n    this.setState({\n      xPos: 0,\n      yPos: 150,\n      ballDirection: '',\n      timeoutId: 0,\n      ballSpeedY: 0,\n      ballSpeedX: 0,\n      keyPressed: false,\n      bounced: false,\n      attempts: attempts + 1,\n      qboxanim: false,\n      xAcceleration: 4\n    });\n  }\n\n  createGround() {\n    let ground = this.obstacles;\n    this.obstacles = [];\n    this.usedTileSpawningPoints = [];\n    this.usedTileSpawningPoints.push(Math.floor(this.state.xPos / 800) + 1);\n    let tileCount = 8 - Math.floor(Math.random() * this.state.difficulty);\n\n    for (let i = 0; i < tileCount; i++) {\n      let x = Math.floor(this.state.xPos / 800) * 800 + 800 + Math.floor(Math.random() * 8) * 100;\n      let y = document.getElementById(\"fill_screen\").clientHeight - 50;\n      this.obstacles.push( /*#__PURE__*/_jsxDEV(Tile, {\n        height: 100,\n        xPos: x,\n        yPos: y\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 33\n      }, this));\n    }\n\n    this.obstacles.push(ground);\n  }\n\n  gameLoop() {\n    let timeoutId = setTimeout(() => {\n      if (!this.state.isGameOver) {\n        //if (this.state.xPos % 800 <= this.state.ballSpeedX && this.state.xPos % 800 > 0 && this.state.xPos > this.state.maxSpeed\n        //&& !this.spawnedTilesAt(Math.floor(this.state.xPos/800)+1))\n        //this.createGround()\n        this.changeDirection();\n        if (this.state.yPos > document.getElementById(\"fill_screen\").clientHeight - 30) this.resetGame();\n        this.setState({\n          keyPressed: false,\n          ballDirection: 'zero acceleration'\n        });\n        this.fall();\n        let remaining = Math.round(300 - new Date().getTime()) / 1000;\n      }\n\n      this.gameLoop();\n    }, this.state.gameLoopTimeout);\n    this.setState({\n      timeoutId\n    });\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.state.timeoutId);\n    window.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  fall() {\n    let grav = this.state.gravity;\n    let ball_speed = this.state.ballSpeedY;\n    let y = this.state.yPos + ball_speed;\n\n    if (this.isThereCollision(this.obstacles) && !this.state.bounced) {\n      if (this.state.collidedObj.type === Tile) {\n        ball_speed *= -1;\n        this.setState({\n          bounced: true\n        });\n      } else if (this.state.collidedObj.type === QuestionBox) {\n        this.setState({\n          qboxanim: true,\n          xAcceleration: 20\n        });\n      }\n    }\n\n    if (!this.isThereCollision(this.obstacles) && this.state.bounced) {\n      this.setState({\n        bounced: false\n      });\n    }\n\n    this.setState({\n      ballSpeedY: ball_speed + grav,\n      yPos: y\n    });\n  }\n\n  isThereCollision(arr) {\n    let ball = {\n      x: this.state.xPos + this.state.ballSize / 2,\n      y: this.state.yPos + this.state.ballSize * 2,\n      width: this.state.ballSize,\n      height: this.state.ballSize\n    };\n    let collidedObj = arr.find(a => {\n      let obstacle = {\n        x: a.props.xPos - 800,\n        y: a.props.yPos,\n        width: a.props.height,\n        height: a.props.height\n      };\n\n      if (ball.x < obstacle.x + obstacle.width && ball.x > obstacle.x && ball.y >= obstacle.y && ball.y <= obstacle.y + obstacle.height) {\n        this.setState({\n          collidedObj: a\n        });\n        return true;\n      }\n\n      return false;\n    });\n    return collidedObj;\n  }\n\n  spawnedTilesAt(xPos) {\n    for (let i = 0; i < this.usedTileSpawningPoints; i++) {\n      if (this.usedTileSpawningPoints[i] == xPos) return true;\n    }\n\n    return false;\n  }\n\n  changeDirection() {\n    switch (this.state.ballDirection) {\n      case 'left':\n        this.moveSideways('left');\n        break;\n\n      case 'right':\n        this.moveSideways('right');\n        break;\n\n      case 'zero acceleration':\n        this.moveSideways('zero acceleration');\n        break;\n\n      default:\n    }\n  }\n\n  moveSideways(dir) {\n    let acceleration = this.state.xAcceleration;\n    let ball_speed = this.state.ballSpeedX;\n    if (dir === 'left') acceleration = acceleration * -1;\n    if (dir === 'zero acceleration') acceleration = 0;\n    if (ball_speed < this.state.maxSpeed && ball_speed > this.state.maxSpeed * -1 || ball_speed >= this.state.maxSpeed && acceleration < 0 || ball_speed <= this.state.maxSpeed * -1 && acceleration > 0) ball_speed += acceleration;\n    if (this.state.xPos < -800 && dir === 'left') ball_speed = 0;\n    let x = this.state.xPos + ball_speed;\n    this.setState({\n      ballSpeedX: ball_speed,\n      xPos: x\n    });\n  }\n\n  handleKeyDown(event) {\n    switch (event.keyCode) {\n      case 37:\n        this.setState({\n          ballDirection: 'left'\n        });\n        break;\n\n      case 39:\n        this.setState({\n          ballDirection: 'right'\n        });\n        break;\n\n      default:\n    }\n\n    this.setState({\n      keyPressed: true\n    });\n  }\n\n  render() {\n    if (this.state.isGameOver) {\n      return /*#__PURE__*/_jsxDEV(GameOver, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"background\",\n          style: {\n            left: -1 * this.state.xPos / 2,\n            backgroundImage: 'url(' + this.state.background + ')'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"fill_screen\",\n          style: {\n            left: -1 * this.state.xPos\n          },\n          children: [this.obstacles, /*#__PURE__*/_jsxDEV(Ball, {\n            xPos: 800 + this.state.xPos,\n            yPos: this.state.yPos,\n            height: this.state.ballSize\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"attempt\",\n            style: {\n              left: -1 * this.state.xPos\n            },\n            children: [\"Attempt: \", this.state.attempts]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 21\n        }, this), this.state.qboxanim ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"qboxanim\",\n          style: {\n            backgroundImage: 'url(' + QBoxHandling + ')'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 44\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 125\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\n\nexport default LineRiderGame;","map":{"version":3,"sources":["C:/Users/thatt/winter-project/the-app/src/Important Pages/LineRiderGame.js"],"names":["React","GameOver","Ball","Tile","QuestionBox","QBoxHandling","LineRiderGame","Component","constructor","props","handleKeyDown","bind","state","yPos","xPos","ballDirection","timeoutId","gameLoopTimeout","ballSpeedY","ballSpeedX","maxSpeed","gravity","difficulty","xAcceleration","ballSize","keyPressed","bounced","isGameover","loggedIn","setName","attempts","background","collidedObj","qboxanim","setElementPropabilities","diffculty","setState","componentDidMount","obstacles","push","usedTileSpawningPoints","initiateTiles","window","addEventListener","gameLoop","document","getElementById","clientHeight","j","tileCount","Math","floor","random","i","x","y","resetGame","createGround","ground","setTimeout","isGameOver","changeDirection","fall","remaining","round","Date","getTime","componentWillUnmount","clearTimeout","removeEventListener","grav","ball_speed","isThereCollision","type","arr","ball","width","height","find","a","obstacle","spawnedTilesAt","moveSideways","dir","acceleration","event","keyCode","render","left","backgroundImage"],"mappings":"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","sourcesContent":["import './LineRiderGame.css'\r\nimport React from 'react'\r\nimport GameOver from './GameOver.js'\r\nimport Ball from '../Components/Ball'\r\nimport Tile from '../Components/Tile'\r\nimport QuestionBox from '../Components/QuestionBox'\r\nimport QBoxHandling from '../Components/Images/question_box_handling.png'\r\n\r\nclass LineRiderGame extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        \r\n        this.handleKeyDown = this.handleKeyDown.bind(this)\r\n\r\n        this.state = {\r\n            yPos: 150,\r\n            xPos: 0,\r\n            ballDirection: '',\r\n            timeoutId: 0,\r\n            gameLoopTimeout: 50,\r\n            ballSpeedY: 0,\r\n            ballSpeedX: 0,\r\n            maxSpeed: 30,\r\n            gravity: props.difficulty/2,\r\n            xAcceleration: 4,\r\n            ballSize: 40,\r\n            keyPressed: false,\r\n            bounced: false,\r\n            isGameover: false,\r\n            loggedIn: false,\r\n            setName: '',\r\n            attempts: 1,\r\n            difficulty: props.difficulty,\r\n            background: props.background,\r\n            collidedObj: <Tile/>,\r\n            qboxanim: false,\r\n        }\r\n\r\n        this.setElementPropabilities(props.diffculty)\r\n    }\r\n\r\n    setElementPropabilities(difficulty) {\r\n        switch (difficulty) {\r\n            case \"plebian\":\r\n                this.setState ({\r\n                    \r\n                })\r\n                break\r\n            case \"easy\":\r\n                break\r\n            case \"medium\":\r\n                break\r\n            case \"hard\":\r\n                break;\r\n            case \"expert\":\r\n                break;\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.obstacles = []\r\n        this.obstacles.push(<QuestionBox height= {50} yPos= {300} xPos= {this.state.xPos + 800 + 200}/>)\r\n        this.usedTileSpawningPoints = []\r\n        this.initiateTiles()\r\n        window.addEventListener('keydown', this.handleKeyDown)\r\n        this.gameLoop()\r\n    }\r\n\r\n    initiateTiles() {\r\n        this.obstacles.push(<Tile height= {100} xPos={800} yPos={document.getElementById(\"fill_screen\").clientHeight - 50}/>)\r\n        for (let j = 0; j < 10*this.state.difficulty; j++) {\r\n            this.usedTileSpawningPoints.push(j)\r\n            let tileCount = 8 - Math.floor(Math.random() * (this.state.difficulty))\r\n            for (let i = 0; i < tileCount; i++) {\r\n                let x = (j*800) + Math.floor(Math.random() * 8) * 100\r\n                let y = document.getElementById(\"fill_screen\").clientHeight - 50            \r\n                \r\n                this.obstacles.push(<Tile height= {100} xPos={x} yPos={y}/>)\r\n            }\r\n        }\r\n    }\r\n\r\n    resetGame() {\r\n        let attempts = this.state.attempts\r\n        this.obstacles= []\r\n        this.obstacles.push(<QuestionBox height= {50} yPos= {300} xPos= {800 + 200}/>)\r\n        this.usedTileSpawningPoints = []\r\n        this.initiateTiles()\r\n        this.setState({\r\n            xPos: 0,\r\n            yPos: 150,\r\n            ballDirection: '',\r\n            timeoutId: 0,\r\n            ballSpeedY: 0,\r\n            ballSpeedX: 0,\r\n            keyPressed: false,\r\n            bounced: false,\r\n            attempts: attempts + 1,\r\n            qboxanim: false,\r\n            xAcceleration: 4,\r\n        })\r\n    }\r\n\r\n    createGround() {\r\n        let ground = this.obstacles\r\n        this.obstacles = []\r\n        this.usedTileSpawningPoints = []\r\n        this.usedTileSpawningPoints.push(Math.floor(this.state.xPos/800)+1)\r\n        let tileCount = 8 - Math.floor(Math.random() * (this.state.difficulty))\r\n        for (let i = 0; i < tileCount; i++) {\r\n            let x = Math.floor(this.state.xPos/800)*800 + 800 + Math.floor(Math.random() * 8) * 100\r\n            let y = document.getElementById(\"fill_screen\").clientHeight - 50            \r\n            \r\n            this.obstacles.push(<Tile height= {100} xPos={x} yPos={y}/>)\r\n        }\r\n        this.obstacles.push(ground)\r\n    }\r\n\r\n    gameLoop() { \r\n\r\n        let timeoutId = setTimeout(() => {\r\n            if (!this.state.isGameOver) {\r\n              //if (this.state.xPos % 800 <= this.state.ballSpeedX && this.state.xPos % 800 > 0 && this.state.xPos > this.state.maxSpeed\r\n                //&& !this.spawnedTilesAt(Math.floor(this.state.xPos/800)+1))\r\n                //this.createGround()\r\n              this.changeDirection()\r\n              if (this.state.yPos > document.getElementById(\"fill_screen\").clientHeight-30)\r\n                this.resetGame()\r\n              this.setState({ keyPressed: false, ballDirection: 'zero acceleration' })\r\n              this.fall()\r\n              let remaining = Math.round(300 - (new Date()).getTime()) / 1000\r\n            }\r\n      \r\n            this.gameLoop()\r\n          }, this.state.gameLoopTimeout)\r\n      \r\n        this.setState({ timeoutId })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.state.timeoutId)\r\n        window.removeEventListener('keydown', this.handleKeyDown)\r\n    }\r\n\r\n    fall() {\r\n        let grav = this.state.gravity\r\n        let ball_speed = this.state.ballSpeedY\r\n        let y = this.state.yPos + ball_speed\r\n        if (this.isThereCollision(this.obstacles) && !this.state.bounced) {\r\n            if (this.state.collidedObj.type === Tile) {\r\n                ball_speed *= -1\r\n                this.setState({bounced: true})\r\n            }\r\n            else if (this.state.collidedObj.type === QuestionBox) {\r\n                this.setState({qboxanim: true, xAcceleration: 20})\r\n            }\r\n        }\r\n        if (!this.isThereCollision(this.obstacles) && this.state.bounced) {\r\n            this.setState({bounced: false})\r\n        }\r\n        this.setState({\r\n            ballSpeedY: ball_speed + grav,\r\n            yPos: y})\r\n    }\r\n\r\n    isThereCollision(arr) {\r\n        let ball = {x: this.state.xPos + this.state.ballSize/2, y: this.state.yPos + this.state.ballSize*2, \r\n                    width: this.state.ballSize, height: this.state.ballSize}\r\n        let collidedObj = arr.find(a => {\r\n            let obstacle = {x: a.props.xPos - 800, y: a.props.yPos, width: a.props.height, height: a.props.height}\r\n            if (ball.x < obstacle.x + obstacle.width && ball.x > obstacle.x &&\r\n                ball.y >= obstacle.y && ball.y <= obstacle.y+obstacle.height) {\r\n                    this.setState({collidedObj: a})\r\n                    return true\r\n                }\r\n            return false\r\n        })\r\n\r\n        return collidedObj\r\n    }\r\n\r\n    spawnedTilesAt(xPos) {\r\n        for (let i = 0; i < this.usedTileSpawningPoints; i++) {\r\n            if (this.usedTileSpawningPoints[i] == xPos)\r\n                return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    changeDirection() {\r\n        switch (this.state.ballDirection) {\r\n          case 'left':\r\n              this.moveSideways('left')\r\n            break\r\n          case 'right':\r\n              this.moveSideways('right')\r\n              break\r\n          case 'zero acceleration':\r\n              this.moveSideways('zero acceleration')\r\n            break\r\n          default:\r\n        }\r\n    }\r\n\r\n    moveSideways(dir) {\r\n        let acceleration = this.state.xAcceleration\r\n        let ball_speed = this.state.ballSpeedX\r\n        if (dir === 'left')\r\n            acceleration = acceleration * -1\r\n        if (dir === 'zero acceleration')\r\n            acceleration = 0\r\n        if ((ball_speed < this.state.maxSpeed && ball_speed > this.state.maxSpeed*-1)\r\n            || (ball_speed >= this.state.maxSpeed && acceleration < 0) || (ball_speed <= this.state.maxSpeed*-1 && acceleration > 0))\r\n            ball_speed += acceleration\r\n        if (this.state.xPos < -800 && dir === 'left')\r\n            ball_speed = 0\r\n        let x = this.state.xPos + ball_speed\r\n        this.setState({\r\n            ballSpeedX: ball_speed,\r\n            xPos: x\r\n        })\r\n    }\r\n\r\n    handleKeyDown(event) {\r\n        switch (event.keyCode) {\r\n            case 37:\r\n                this.setState({ ballDirection: 'left' })\r\n                break\r\n            case 39:\r\n                this.setState({ ballDirection: 'right' })\r\n                break\r\n            default:\r\n        }\r\n        this.setState({\r\n            keyPressed: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isGameOver) {\r\n            return (\r\n                <GameOver/>\r\n            )\r\n        }\r\n        else {\r\n            return(\r\n                <div>\r\n                    <div id = \"background\" style= {{left: -1*this.state.xPos/2, backgroundImage: 'url('+this.state.background+')'}}/>\r\n                    <div id= \"fill_screen\" style= {{left: -1*this.state.xPos}}>\r\n                        {this.obstacles}\r\n                        <Ball xPos= {800 + this.state.xPos}\r\n                        yPos={this.state.yPos}\r\n                        height={this.state.ballSize}/>\r\n                        <p className= \"attempt\" style= {{left: -1*this.state.xPos}}>Attempt: {this.state.attempts}</p>\r\n                    </div>\r\n                    {this.state.qboxanim ? <div className= \"qboxanim\" style= {{backgroundImage: 'url('+QBoxHandling+')'}}/>:<div/>}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\nexport default LineRiderGame\r\n"]},"metadata":{},"sourceType":"module"}