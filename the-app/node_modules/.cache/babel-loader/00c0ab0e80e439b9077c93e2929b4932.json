{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\thatt\\\\winter-project\\\\the-app\\\\src\\\\Important Pages\\\\LineRiderGame.js\";\nimport './LineRiderGame.css';\nimport '../index.css'; //I moved the intro page messages to this one so that they will move away with the background\n\nimport React from 'react';\nimport GameOver from './GameOver.js';\nimport Ball from '../Components/Ball';\nimport Tile from '../Components/Ball';\n\nclass LineRiderGame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.state = {\n      yPos: 150,\n      xPos: 220,\n      ballDirection: '',\n      timeoutId: 0,\n      gameLoopTimeout: 50,\n      ballSpeedY: 0,\n      ballSpeedX: 0,\n      gravity: 2,\n      xAcceleration: 0.6,\n      ballSize: 40,\n      keyPressed: false,\n      bounced: false,\n      isGameover: false,\n      loggedIn: false,\n      setName: '',\n      attempts: 1\n    };\n  }\n\n  componentDidMount() {\n    this.createGround();\n    window.addEventListener('keydown', this.handleKeyDown);\n    this.gameLoop();\n  }\n\n  createGround() {\n    let tiles = [];\n    const tileCount = Math.floor(Math.random() * props.difficulty) + 1;\n\n    for (let i = 0; i < obstacleCount; i++) {\n      const x = Math.floor(Math.random() * document.getElementById(\"fill_screen\").clientWidth) + 1;\n      const y = Math.floor(Math.random() * document.getElementById(\"fill_screen\").clientHeight) + 1;\n      tiles.push( /*#__PURE__*/_jsxDEV(Tile, {\n        image: url('../Backgrounds/tile.jpg'),\n        xPos: x,\n        yPos: y\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 24\n      }, this));\n    }\n\n    return obstacles;\n  }\n\n  gameLoop() {\n    let timeoutId = setTimeout(() => {\n      if (!this.state.isGameOver) {\n        this.fall();\n        this.changeDirection();\n        this.setState({\n          keyPressed: false,\n          ballDirection: 'zero acceleration'\n        });\n      }\n\n      this.gameLoop();\n    }, this.state.gameLoopTimeout);\n    this.setState({\n      timeoutId\n    });\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.state.timeoutId);\n    window.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  fall() {\n    let grav = this.state.gravity;\n    let ball_speed = this.state.ballSpeedY;\n    let y = this.state.yPos + ball_speed;\n    let game_height = document.getElementById(\"fill_screen\").clientHeight - this.state.ballSize - 10;\n\n    if (this.state.yPos >= game_height && !this.state.bounced) {\n      ball_speed *= -1;\n      this.setState({\n        bounced: true\n      });\n    }\n\n    if (this.state.yPos < game_height && this.state.bounced) {\n      this.setState({\n        bounced: false\n      });\n    }\n\n    this.setState({\n      ballSpeedY: ball_speed + grav,\n      yPos: y\n    });\n  }\n\n  changeDirection() {\n    switch (this.state.ballDirection) {\n      case 'left':\n        this.moveSideways('left');\n        break;\n\n      case 'right':\n        this.moveSideways('right');\n        break;\n\n      case 'zero acceleration':\n        this.moveSideways('zero acceleration');\n        break;\n\n      default:\n    }\n  }\n\n  moveSideways(dir) {\n    let acceleration = this.state.xAcceleration;\n    let ball_speed = this.state.ballSpeedX;\n    if (dir === 'left') acceleration = acceleration * -1;\n    if (dir === 'zero acceleration') acceleration = 0;\n    let x = this.state.xPos + ball_speed;\n    this.setState({\n      ballSpeedX: ball_speed + acceleration,\n      xPos: x\n    });\n  }\n\n  handleKeyDown(event) {\n    switch (event.keyCode) {\n      case 37:\n        this.setState({\n          ballDirection: 'left'\n        });\n        break;\n\n      case 39:\n        this.setState({\n          ballDirection: 'right'\n        });\n        break;\n\n      default:\n    }\n\n    this.setState({\n      keyPressed: true\n    });\n  }\n\n  render() {\n    if (this.state.isGameOver) {\n      return /*#__PURE__*/_jsxDEV(GameOver, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"fill_screen\",\n          style: {\n            left: -1 * this.state.xPos\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"attempt_text\",\n          style: {\n            left: -1 * this.state.xPos\n          },\n          children: [\"Attempt: \", this.state.attempts]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Ball, {\n          yPos: this.state.yPos,\n          height: this.state.ballSize\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\n\nexport default LineRiderGame;","map":{"version":3,"sources":["C:/Users/thatt/winter-project/the-app/src/Important Pages/LineRiderGame.js"],"names":["React","GameOver","Ball","Tile","LineRiderGame","Component","constructor","props","handleKeyDown","bind","state","yPos","xPos","ballDirection","timeoutId","gameLoopTimeout","ballSpeedY","ballSpeedX","gravity","xAcceleration","ballSize","keyPressed","bounced","isGameover","loggedIn","setName","attempts","componentDidMount","createGround","window","addEventListener","gameLoop","tiles","tileCount","Math","floor","random","difficulty","i","obstacleCount","x","document","getElementById","clientWidth","y","clientHeight","push","url","obstacles","setTimeout","isGameOver","fall","changeDirection","setState","componentWillUnmount","clearTimeout","removeEventListener","grav","ball_speed","game_height","moveSideways","dir","acceleration","event","keyCode","render","left"],"mappings":"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","sourcesContent":["import './LineRiderGame.css'\r\nimport '../index.css' //I moved the intro page messages to this one so that they will move away with the background\r\nimport React from 'react'\r\nimport GameOver from './GameOver.js'\r\nimport Ball from '../Components/Ball'\r\nimport Tile from '../Components/Ball'\r\n\r\nclass LineRiderGame extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.handleKeyDown = this.handleKeyDown.bind(this)\r\n\r\n        this.state = {\r\n            yPos: 150,\r\n            xPos: 220,\r\n            ballDirection: '',\r\n            timeoutId: 0,\r\n            gameLoopTimeout: 50,\r\n            ballSpeedY: 0,\r\n            ballSpeedX: 0,\r\n            gravity: 2,\r\n            xAcceleration: 0.6,\r\n            ballSize: 40,\r\n            keyPressed: false,\r\n            bounced: false,\r\n            isGameover: false,\r\n            loggedIn: false,\r\n            setName: '',\r\n            attempts: 1,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.createGround()\r\n        window.addEventListener('keydown', this.handleKeyDown)\r\n        this.gameLoop()\r\n    }\r\n\r\n    createGround() {\r\n        let tiles = [];\r\n        const tileCount = Math.floor(Math.random() * (props.difficulty)) + 1;\r\n        for (let i = 0; i < obstacleCount; i++) {\r\n            const x = Math.floor(Math.random() * document.getElementById(\"fill_screen\").clientWidth) + 1;\r\n            const y = Math.floor(Math.random() * document.getElementById(\"fill_screen\").clientHeight) + 1;            \r\n\r\n            tiles.push(<Tile image={url('../Backgrounds/tile.jpg')} xPos={x} yPos={y}/>);\r\n        }\r\n\r\n        return obstacles;\r\n    }\r\n\r\n    gameLoop() { \r\n\r\n        let timeoutId = setTimeout(() => {\r\n            if (!this.state.isGameOver) {\r\n              this.fall()\r\n              this.changeDirection()\r\n              this.setState({ keyPressed: false, ballDirection: 'zero acceleration' })\r\n            }\r\n      \r\n            this.gameLoop()\r\n          }, this.state.gameLoopTimeout)\r\n      \r\n        this.setState({ timeoutId })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.state.timeoutId)\r\n        window.removeEventListener('keydown', this.handleKeyDown)\r\n    }\r\n\r\n    fall() {\r\n        let grav = this.state.gravity\r\n        let ball_speed = this.state.ballSpeedY\r\n        let y = this.state.yPos + ball_speed\r\n        let game_height = document.getElementById(\"fill_screen\").clientHeight - this.state.ballSize - 10\r\n        if (this.state.yPos >= game_height && !this.state.bounced) {\r\n            ball_speed *= -1\r\n            this.setState({bounced: true})\r\n        }\r\n        if (this.state.yPos < game_height && this.state.bounced) {\r\n            this.setState({bounced: false})\r\n        }\r\n        this.setState({\r\n            ballSpeedY: ball_speed + grav,\r\n            yPos: y})\r\n    }\r\n\r\n    changeDirection() {\r\n        switch (this.state.ballDirection) {\r\n          case 'left':\r\n              this.moveSideways('left')\r\n            break\r\n          case 'right':\r\n              this.moveSideways('right')\r\n              break\r\n          case 'zero acceleration':\r\n              this.moveSideways('zero acceleration')\r\n            break\r\n          default:\r\n        }\r\n    }\r\n\r\n    moveSideways(dir) {\r\n        let acceleration = this.state.xAcceleration\r\n        let ball_speed = this.state.ballSpeedX\r\n        if (dir === 'left')\r\n            acceleration = acceleration * -1\r\n        if (dir === 'zero acceleration')\r\n            acceleration = 0;\r\n        let x = this.state.xPos + ball_speed\r\n        this.setState({\r\n            ballSpeedX: ball_speed + acceleration,\r\n            xPos: x\r\n        })\r\n    }\r\n\r\n    handleKeyDown(event) {\r\n        switch (event.keyCode) {\r\n            case 37:\r\n                this.setState({ ballDirection: 'left' })\r\n                break\r\n            case 39:\r\n                this.setState({ ballDirection: 'right' })\r\n                break\r\n            default:\r\n        }\r\n        this.setState({\r\n            keyPressed: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isGameOver) {\r\n            return (\r\n                <GameOver/>\r\n            )\r\n        }\r\n        else {\r\n            return(\r\n                <div>\r\n                    <div id= \"fill_screen\" style= {{left: -1*this.state.xPos}}/>\r\n                    <p className= \"attempt_text\" style= {{left: -1*this.state.xPos}}>Attempt: {this.state.attempts}</p>\r\n                    <Ball yPos={this.state.yPos}\r\n                        height={this.state.ballSize}/>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\nexport default LineRiderGame;"]},"metadata":{},"sourceType":"module"}