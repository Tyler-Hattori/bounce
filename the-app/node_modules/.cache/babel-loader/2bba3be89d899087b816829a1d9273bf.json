{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\thatt\\\\winter-project\\\\the-app\\\\src\\\\LineRiderGame.js\";\nimport './LineRiderGame.css';\nimport './index.css'; //I moved the intro page messages to this one so that they will move away with the background\n\nimport React from 'react';\nimport GameOver from './GameOver.js';\n\nclass LineRiderGame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleKeyDown = this.handleKeyDown.bind(this); //Quick JAVA/REACT variable usage tutorial:\n    //I use the terms method and function interchangably. Also, the term object just means something we created that follows the rules of a certain class.\n    //IN JAVA, you typically initialize a variable in the constructor, and create two methods (normally called \"setVariable()\" and \"getVariable()\" )...\n    //that can be used to change or access the variable's value at a later time. However, the variables in a CLASS's constructor can be used...\n    //inside ANY method in that CLASS as long as you say this.variable_name (\"this.\" points to the CLASS--LineRiderGame in this case)...\n    //If you were to not use \"this.\" , the code would try to find a variable called variable_name inside that METHOD. This is why \"this.\" is...\n    //so important. \n    //The reason we like setVariable() and getVariable() methods in Java is because what if we want to know the value of a variable from...\n    //an object of a DIFFERENT class? \"this.\" wouldn't work, because it wouldn't point to the right class. Well, with a getVariable() method...\n    //we could say \"object_name.getVariable()\" and it would work fine. \n    //HOWEVER, REACT IS A LITTLE DIFFERENT\n    //In React, in a class constructor, initialize variables inside \"this.state\" as shown below. Then, if we want to change the value of a variable,...\n    //to 2 just call this.setState = { variable: 2 }. If you read this code, you'll see how to use setState() to easily change multiple values at once.\n    //The downside is instead of using \"this.variable\" you have to use \"this.state.variable\"\n\n    this.state = {\n      yPos: 150,\n      xPos: 300,\n      ballDirection: '',\n      timeoutId: 0,\n      gameLoopTimeout: 50,\n      ballSpeedY: 0,\n      ballSpeedX: 0,\n      gravity: 2,\n      xAcceleration: 0.6,\n      ballSize: 40,\n      keyPressed: false,\n      bounced: false,\n      isGameover: false,\n      selectionsSet: false,\n      selectionEasyColor: 'gray',\n      selectionMediumColor: 'gray',\n      selectionPlebianColor: 'gray',\n      selectionHardColor: 'gray',\n      selectionExpertColor: 'gray'\n    };\n  } //You can normally name methods whatever you want, but some names have been preset to do certain things\n  //This is specially-named method in REACT that will run immediately after LineRiderGame is created\n\n\n  componentDidMount() {\n    this.startGame();\n    window.addEventListener('keydown', this.handleKeyDown);\n    this.gameLoop();\n  }\n\n  startGame() {\n    //Game\n    //Ball \n    this.setState({});\n  }\n\n  gameLoop() {\n    //by calling gameLoop() inside this method, it creates a loop... \n    //so we can constantly be updating object positions on the page...\n    //or check if the user is pressing a key\n    let timeoutId = setTimeout(() => {\n      //timeouts will run everything in the first parameter after a certain amount of time (second parameter-gameLoopTimeout)\n      if (!this.state.selectionsSet) {\n        //if the user has not selected the difficulty and such\n        this.makeSelections();\n      } else if (!this.state.isGameOver) {\n        //the user did selecte the difficulty, and the game is not over. This is the gameplay\n        this.fall(); //implements gravity\n\n        this.changeDirection();\n        this.setState({\n          keyPressed: false,\n          ballDirection: 'zero acceleration'\n        });\n      }\n\n      this.gameLoop();\n    }, this.state.gameLoopTimeout);\n    this.setState({\n      timeoutId\n    });\n  } //This is also a specially-named method\n\n\n  componentWillUnmount() {\n    clearTimeout(this.state.timeoutId);\n    window.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  makeSelections() {\n    let difficultyStatus = this.state.selectionsSet;\n\n    if (difficultyStatus) {\n      this.setState({\n        selectionsSet: true\n      });\n    }\n  } //gravity. document.getElementByID() is an extremely useful tool to access the properties of an HTML element.\n  //Check out the render() method to see what I'm talking about.\n\n\n  fall() {\n    let grav = this.state.gravity;\n    let ball_speed = this.state.ballSpeedY;\n    let y = this.state.yPos + ball_speed;\n    let game_height = document.getElementById(\"fill_screen\").clientHeight - this.state.ballSize - 10;\n\n    if (this.state.yPos >= game_height && !this.state.bounced) {\n      ball_speed *= -1;\n      this.setState({\n        bounced: true\n      });\n    }\n\n    if (this.state.yPos < game_height && this.state.bounced) {\n      this.setState({\n        bounced: false\n      });\n    }\n\n    this.setState({\n      ballSpeedY: ball_speed + grav,\n      yPos: y\n    });\n  } //since it was called in gameLoop(), it will constantly be checking what the ballDirection is (left or right)\n  //switch and case is just a fancy way to get around using if and else if statements.\n\n\n  changeDirection() {\n    switch (this.state.ballDirection) {\n      case 'left':\n        this.moveSideways('left');\n        break;\n\n      case 'right':\n        this.moveSideways('right');\n        break;\n\n      case 'zero acceleration':\n        this.moveSideways('zero acceleration');\n        break;\n\n      default:\n    }\n  } //essentially gravity in the sideways direction\n\n\n  moveSideways(dir) {\n    let acceleration = this.state.xAcceleration;\n    let ball_speed = this.state.ballSpeedX;\n    if (dir === 'left') acceleration = acceleration * -1;\n    if (dir === 'zero acceleration') acceleration = 0;\n    let x = this.state.xPos + ball_speed;\n    this.setState({\n      ballSpeedX: ball_speed + acceleration,\n      xPos: x\n    });\n  }\n\n  resetGame() {\n    //reset the Game\n    //reset the Ball position\n    this.setState({});\n  } //Checks when the arrow keys are pressed. 37 keycode is the left arrow key, for example.\n  //I can do this without using gameLoop() because I set up handleKeyDown as an EVENT LISTENER in the constructor.\n  //Google can explain event listeners in React.js better than I can.\n\n\n  handleKeyDown(event) {\n    switch (event.keyCode) {\n      case 37:\n        this.setState({\n          ballDirection: 'left'\n        });\n        break;\n\n      case 39:\n        this.setState({\n          ballDirection: 'right'\n        });\n        break;\n\n      default:\n    }\n\n    this.setState({\n      keyPressed: true\n    });\n  }\n\n  select(difficulty) {\n    switch (difficulty) {\n      case \"plebian\":\n        this.setState({\n          selectionPlebianColor: \"yellow\",\n          selectionEasyColor: \"gray\",\n          selectionMediumColor: \"gray\",\n          selectionHardColor: \"gray\",\n          selectionExpertColor: \"gray\"\n        });\n        break;\n\n      case \"easy\":\n        this.setState({\n          selectionPlebianColor: \"gray\",\n          selectionEasyColor: \"green\",\n          selectionMediumColor: \"gray\",\n          selectionHardColor: \"gray\",\n          selectionExpertColor: \"gray\"\n        });\n        break;\n\n      case \"medium\":\n        this.setState({\n          selectionPlebianColor: \"gray\",\n          selectionEasyColor: \"gray\",\n          selectionMediumColor: \"blue\",\n          selectionHardColor: \"gray\",\n          selectionExpertColor: \"gray\"\n        });\n        break;\n\n      case \"hard\":\n        this.setState({\n          selectionPlebianColor: \"gray\",\n          selectionEasyColor: \"gray\",\n          selectionMediumColor: \"gray\",\n          selectionHardColor: \"red\",\n          selectionExpertColor: \"gray\"\n        });\n        break;\n\n      case \"expert\":\n        this.setState({\n          selectionPlebianColor: \"gray\",\n          selectionEasyColor: \"gray\",\n          selectionMediumColor: \"gray\",\n          selectionHardColor: \"gray\",\n          selectionExpertColor: \"purple\"\n        });\n        break;\n\n      case \"Ok\":\n        this.setState({\n          selectionsSet: true\n        });\n        break;\n\n      default:\n    }\n  } //specially-named method that runs whenever we update props or components\n  //This is HTML. It is how we get the JAVA code we write to actually show up on screen.\n  //REACT is cool because it combines JAVA and HTML in this way. Normally, you write a website code in HTML...\n  //and if you want Java you have to use the <script> (JavaScript code) </script> tag\n\n\n  render() {\n    // If the user wins\n    if (this.state.isGameOver) {\n      return /*#__PURE__*/_jsxDEV(GameOver //define components\n      , {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 17\n      }, this);\n    }\n\n    if (this.state.selectionsSet) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"fill_screen\",\n          style: {\n            left: this.state.xPos * -1\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text fade_in\",\n            style: {\n              color: this.state.selectionColor\n            },\n            children: \"Line Roller\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 251,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"subtitle left text fade_in\",\n            children: \" (not to be confused with Line Rider) \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"instructions right text fade_in\",\n            children: \" Game instructions \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 253,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"https://clipart.info/images/ccovers/1495749720Bowling-Ball-PNG-Clip-Art.png\",\n            style: {\n              height: this.state.ballSize,\n              top: this.state.yPos\n            },\n            id: \"ball-image\",\n            className: \"Ball\",\n            alt: \"ball\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 248,\n        columnNumber: 13\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"fill_screen\",\n          style: {\n            left: this.state.xPos * -1\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            className: \"text fade_in\",\n            children: \"Line Roller\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"subtitle left text fade_in\",\n            children: \"(not to be confused with Line Rider)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"instructions right text fade_in\",\n            children: \"Choose difficulty and bounce to the right with the arrow keys!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"text_difficulty\",\n            style: {\n              marginBottom: 0\n            },\n            children: \"Difficulty\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"in_line\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button\",\n              onClick: () => this.select(\"plebian\"),\n              style: {\n                backgroundColor: this.state.selectionPlebianColor\n              },\n              children: \"Plebian\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button\",\n              onClick: () => this.select(\"easy\"),\n              style: {\n                backgroundColor: this.state.selectionEasyColor\n              },\n              children: \"Easy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button\",\n              onClick: () => this.select(\"medium\"),\n              style: {\n                backgroundColor: this.state.selectionMediumColor\n              },\n              children: \"Medium\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button\",\n              onClick: () => this.select(\"hard\"),\n              style: {\n                backgroundColor: this.state.selectionHardColor\n              },\n              children: \"Hard\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"button\",\n              onClick: () => this.select(\"expert\"),\n              style: {\n                backgroundColor: this.state.selectionExpertColor\n              },\n              children: \"Expert\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 280,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"button\",\n            onClick: () => this.select(\"Ok\"),\n            children: \"Ok?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\n\nexport default LineRiderGame;","map":{"version":3,"sources":["C:/Users/thatt/winter-project/the-app/src/LineRiderGame.js"],"names":["React","GameOver","LineRiderGame","Component","constructor","props","handleKeyDown","bind","state","yPos","xPos","ballDirection","timeoutId","gameLoopTimeout","ballSpeedY","ballSpeedX","gravity","xAcceleration","ballSize","keyPressed","bounced","isGameover","selectionsSet","selectionEasyColor","selectionMediumColor","selectionPlebianColor","selectionHardColor","selectionExpertColor","componentDidMount","startGame","window","addEventListener","gameLoop","setState","setTimeout","makeSelections","isGameOver","fall","changeDirection","componentWillUnmount","clearTimeout","removeEventListener","difficultyStatus","grav","ball_speed","y","game_height","document","getElementById","clientHeight","moveSideways","dir","acceleration","x","resetGame","event","keyCode","select","difficulty","render","left","color","selectionColor","height","top","marginBottom","backgroundColor"],"mappings":"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","sourcesContent":["import './LineRiderGame.css'\r\nimport './index.css' //I moved the intro page messages to this one so that they will move away with the background\r\nimport React from 'react'\r\nimport GameOver from './GameOver.js'\r\n\r\nclass LineRiderGame extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.handleKeyDown = this.handleKeyDown.bind(this)\r\n\r\n        //Quick JAVA/REACT variable usage tutorial:\r\n\r\n        //I use the terms method and function interchangably. Also, the term object just means something we created that follows the rules of a certain class.\r\n        //IN JAVA, you typically initialize a variable in the constructor, and create two methods (normally called \"setVariable()\" and \"getVariable()\" )...\r\n        //that can be used to change or access the variable's value at a later time. However, the variables in a CLASS's constructor can be used...\r\n        //inside ANY method in that CLASS as long as you say this.variable_name (\"this.\" points to the CLASS--LineRiderGame in this case)...\r\n        //If you were to not use \"this.\" , the code would try to find a variable called variable_name inside that METHOD. This is why \"this.\" is...\r\n        //so important. \r\n        //The reason we like setVariable() and getVariable() methods in Java is because what if we want to know the value of a variable from...\r\n        //an object of a DIFFERENT class? \"this.\" wouldn't work, because it wouldn't point to the right class. Well, with a getVariable() method...\r\n        //we could say \"object_name.getVariable()\" and it would work fine. \r\n\r\n        //HOWEVER, REACT IS A LITTLE DIFFERENT\r\n        //In React, in a class constructor, initialize variables inside \"this.state\" as shown below. Then, if we want to change the value of a variable,...\r\n        //to 2 just call this.setState = { variable: 2 }. If you read this code, you'll see how to use setState() to easily change multiple values at once.\r\n        //The downside is instead of using \"this.variable\" you have to use \"this.state.variable\"\r\n\r\n        this.state = {\r\n            yPos: 150,\r\n            xPos: 300,\r\n            ballDirection: '',\r\n            timeoutId: 0,\r\n            gameLoopTimeout: 50,\r\n            ballSpeedY: 0,\r\n            ballSpeedX: 0,\r\n            gravity: 2,\r\n            xAcceleration: 0.6,\r\n            ballSize: 40,\r\n            keyPressed: false,\r\n            bounced: false,\r\n            isGameover: false,\r\n            selectionsSet: false,\r\n            selectionEasyColor: 'gray',\r\n            selectionMediumColor: 'gray',\r\n            selectionPlebianColor: 'gray',\r\n            selectionHardColor: 'gray',\r\n            selectionExpertColor: 'gray',\r\n            \r\n        }\r\n    }\r\n\r\n    //You can normally name methods whatever you want, but some names have been preset to do certain things\r\n    //This is specially-named method in REACT that will run immediately after LineRiderGame is created\r\n    componentDidMount() {\r\n        this.startGame()\r\n        window.addEventListener('keydown', this.handleKeyDown)\r\n        this.gameLoop()\r\n    }\r\n\r\n    startGame() {\r\n        //Game\r\n        //Ball \r\n        this.setState ({\r\n        })\r\n    }\r\n\r\n    gameLoop() { \r\n        //by calling gameLoop() inside this method, it creates a loop... \r\n        //so we can constantly be updating object positions on the page...\r\n        //or check if the user is pressing a key\r\n\r\n        let timeoutId = setTimeout(() => { //timeouts will run everything in the first parameter after a certain amount of time (second parameter-gameLoopTimeout)\r\n            if (!this.state.selectionsSet) {\r\n                //if the user has not selected the difficulty and such\r\n              this.makeSelections()\r\n            }\r\n            else if (!this.state.isGameOver) {\r\n                //the user did selecte the difficulty, and the game is not over. This is the gameplay\r\n              this.fall()  //implements gravity\r\n              this.changeDirection()\r\n              this.setState({ keyPressed: false, ballDirection: 'zero acceleration' })\r\n            }\r\n      \r\n            this.gameLoop()\r\n          }, this.state.gameLoopTimeout)\r\n      \r\n        this.setState({ timeoutId })\r\n    }\r\n\r\n    //This is also a specially-named method\r\n    componentWillUnmount() {\r\n        clearTimeout(this.state.timeoutId)\r\n        window.removeEventListener('keydown', this.handleKeyDown)\r\n    }\r\n\r\n    makeSelections() {\r\n        let difficultyStatus = this.state.selectionsSet\r\n        if (difficultyStatus) {\r\n            this.setState({ selectionsSet: true })\r\n        }\r\n    }\r\n\r\n    //gravity. document.getElementByID() is an extremely useful tool to access the properties of an HTML element.\r\n    //Check out the render() method to see what I'm talking about.\r\n    fall() {\r\n        let grav = this.state.gravity\r\n        let ball_speed = this.state.ballSpeedY\r\n        let y = this.state.yPos + ball_speed\r\n        let game_height = document.getElementById(\"fill_screen\").clientHeight - this.state.ballSize - 10\r\n        if (this.state.yPos >= game_height && !this.state.bounced) {\r\n            ball_speed *= -1\r\n            this.setState({bounced: true})\r\n        }\r\n        if (this.state.yPos < game_height && this.state.bounced) {\r\n            this.setState({bounced: false})\r\n        }\r\n        this.setState({\r\n            ballSpeedY: ball_speed + grav,\r\n            yPos: y})\r\n    }\r\n\r\n    //since it was called in gameLoop(), it will constantly be checking what the ballDirection is (left or right)\r\n    //switch and case is just a fancy way to get around using if and else if statements.\r\n    changeDirection() {\r\n        switch (this.state.ballDirection) {\r\n          case 'left':\r\n              this.moveSideways('left')\r\n            break\r\n          case 'right':\r\n              this.moveSideways('right')\r\n              break\r\n          case 'zero acceleration':\r\n              this.moveSideways('zero acceleration')\r\n            break\r\n          default:\r\n        }\r\n    }\r\n\r\n    //essentially gravity in the sideways direction\r\n    moveSideways(dir) {\r\n        let acceleration = this.state.xAcceleration\r\n        let ball_speed = this.state.ballSpeedX\r\n        if (dir === 'left')\r\n            acceleration = acceleration * -1\r\n        if (dir === 'zero acceleration')\r\n            acceleration = 0;\r\n        let x = this.state.xPos + ball_speed\r\n        this.setState({\r\n            ballSpeedX: ball_speed + acceleration,\r\n            xPos: x\r\n        })\r\n    }\r\n\r\n    resetGame() {\r\n        //reset the Game\r\n        //reset the Ball position\r\n\r\n        this.setState({\r\n            \r\n        })\r\n    }\r\n\r\n    //Checks when the arrow keys are pressed. 37 keycode is the left arrow key, for example.\r\n    //I can do this without using gameLoop() because I set up handleKeyDown as an EVENT LISTENER in the constructor.\r\n    //Google can explain event listeners in React.js better than I can.\r\n    handleKeyDown(event) {\r\n        switch (event.keyCode) {\r\n            case 37:\r\n                this.setState({ ballDirection: 'left' })\r\n                break\r\n            case 39:\r\n                this.setState({ ballDirection: 'right' })\r\n                break\r\n            default:\r\n        }\r\n        this.setState({\r\n            keyPressed: true\r\n        })\r\n    }\r\n\r\n    select(difficulty) {\r\n        switch(difficulty) {\r\n            case \"plebian\":\r\n                this.setState({\r\n                    selectionPlebianColor: \"yellow\",\r\n                    selectionEasyColor: \"gray\",\r\n                    selectionMediumColor: \"gray\",\r\n                    selectionHardColor: \"gray\",\r\n                    selectionExpertColor: \"gray\"})\r\n                break\r\n            case \"easy\":\r\n                this.setState({\r\n                    selectionPlebianColor: \"gray\",\r\n                    selectionEasyColor: \"green\",\r\n                    selectionMediumColor: \"gray\",\r\n                    selectionHardColor: \"gray\",\r\n                    selectionExpertColor: \"gray\"})\r\n                break\r\n            case \"medium\":\r\n                this.setState({\r\n                    selectionPlebianColor: \"gray\",\r\n                    selectionEasyColor: \"gray\",\r\n                    selectionMediumColor: \"blue\",\r\n                    selectionHardColor: \"gray\",\r\n                    selectionExpertColor: \"gray\"})\r\n                break\r\n            case \"hard\":\r\n                this.setState({\r\n                    selectionPlebianColor: \"gray\",\r\n                    selectionEasyColor: \"gray\",\r\n                    selectionMediumColor: \"gray\",\r\n                    selectionHardColor: \"red\",\r\n                    selectionExpertColor: \"gray\"})\r\n                break\r\n            case \"expert\":\r\n                this.setState({\r\n                    selectionPlebianColor: \"gray\",\r\n                    selectionEasyColor: \"gray\",\r\n                    selectionMediumColor: \"gray\",\r\n                    selectionHardColor: \"gray\",\r\n                    selectionExpertColor: \"purple\"})\r\n                break\r\n            case \"Ok\":\r\n                this.setState({ selectionsSet: true })\r\n                break\r\n            default:\r\n            \r\n        }\r\n    }\r\n\r\n    //specially-named method that runs whenever we update props or components\r\n    //This is HTML. It is how we get the JAVA code we write to actually show up on screen.\r\n    //REACT is cool because it combines JAVA and HTML in this way. Normally, you write a website code in HTML...\r\n    //and if you want Java you have to use the <script> (JavaScript code) </script> tag\r\n    render() {\r\n        // If the user wins\r\n        if (this.state.isGameOver) {\r\n            return (\r\n                <GameOver\r\n                    //define components\r\n                />\r\n            )\r\n        }\r\n\r\n        if (this.state.selectionsSet) {\r\n            return(\r\n            <div>\r\n                <div id = \"fill_screen\"\r\n                    style= {{left: this.state.xPos*-1}}>\r\n                        <h1 className= \"text fade_in\" style={{color:this.state.selectionColor}}>Line Roller</h1>\r\n                        <p className = \"subtitle left text fade_in\"> (not to be confused with Line Rider) </p>\r\n                        <p className = \"instructions right text fade_in\"> Game instructions </p>\r\n                </div>\r\n                        \r\n                <div>\r\n                    <img src= \"https://clipart.info/images/ccovers/1495749720Bowling-Ball-PNG-Clip-Art.png\"\r\n                        style= {{height: this.state.ballSize, \r\n                            top: this.state.yPos}} \r\n                        id= \"ball-image\"\r\n                        className = 'Ball'\r\n                        alt = \"ball\"/>\r\n                </div>\r\n            </div>\r\n            )\r\n        }\r\n        else {\r\n            return (\r\n                <div>\r\n                    <div id= \"fill_screen\" style= {{left: this.state.xPos*-1}}>\r\n                        <h1 className= \"text fade_in\">Line Roller</h1>\r\n                        <p className = \"subtitle left text fade_in\">(not to be confused with Line Rider)</p>\r\n                        <p className = \"instructions right text fade_in\">Choose difficulty and bounce to the right with the arrow keys!</p>\r\n                        <p className = \"text_difficulty\" style={{marginBottom: 0}}>Difficulty</p>\r\n                        <div className= \"in_line\">\r\n                            <button className= \"button\" onClick= {() => this.select(\"plebian\")} style= {{backgroundColor: this.state.selectionPlebianColor}}>Plebian</button>\r\n                            <button className= \"button\" onClick= {() => this.select(\"easy\")} style= {{backgroundColor: this.state.selectionEasyColor}}>Easy</button>\r\n                            <button className= \"button\" onClick= {() => this.select(\"medium\")} style= {{backgroundColor: this.state.selectionMediumColor}}>Medium</button>\r\n                            <button className= \"button\" onClick= {() => this.select(\"hard\")} style= {{backgroundColor: this.state.selectionHardColor}}>Hard</button>\r\n                            <button className= \"button\" onClick= {() => this.select(\"expert\")} style= {{backgroundColor: this.state.selectionExpertColor}}>Expert</button>\r\n                        </div>\r\n                        <button className = \"button\" onClick= {() => this.select(\"Ok\")}>Ok?</button>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\nexport default LineRiderGame;"]},"metadata":{},"sourceType":"module"}