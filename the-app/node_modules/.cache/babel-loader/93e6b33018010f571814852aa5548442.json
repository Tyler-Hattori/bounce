{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\thatt\\\\winter-project\\\\the-app\\\\src\\\\Important Pages\\\\LineRiderGame.js\";\nimport './LineRiderGame.css';\nimport React from 'react';\nimport GameOver from './GameOver.js';\nimport Ball from '../Components/Ball';\nimport Tile from '../Components/Tile';\nimport QuestionBox from '../Components/QuestionBox';\nimport QBoxHandling from '../Components/Images/question_box_handling.png';\nimport QBoxMiniBall from '../Components/Images/question_box_mini_ball.png';\nimport Spring from '../Components/Spring';\nimport SpringImage from '../Components/Images/spring.png';\nimport Laser from '../Components/Laser';\nimport Arrow from '../Components/Arrow';\nimport Sword from '../Components/Sword';\nimport MovingPlatform from '../Components/MovingTile';\n\nclass LineRiderGame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.state = {\n      screenWidth: 1620,\n      screenHeight: 977,\n      yPos: 150,\n      xPos: 0,\n      ballDirection: '',\n      timeoutId: 0,\n      gameLoopTimeout: 50,\n      ballSpeedY: 0,\n      ballSpeedX: 0,\n      maxSpeed: 30,\n      gravity: props.difficulty / 2,\n      xAcceleration: 4,\n      ballSize: 40,\n      keyPressed: false,\n      bounced: false,\n      isGameover: false,\n      loggedIn: false,\n      setName: '',\n      attempts: 1,\n      difficulty: props.difficulty,\n      background: props.background,\n      collidedObj: /*#__PURE__*/_jsxDEV(Tile, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 26\n      }, this),\n      qboxanim: false,\n      springanim: false,\n      time1: 0,\n      time2: 0,\n      qBoxImage: QBoxHandling,\n      tileImage: props.tileImage\n    };\n  }\n\n  componentDidMount() {\n    this.plebianObstacles = [[]];\n    this.easyObstacles = [[]];\n    this.mediumObstacles = [[]];\n    this.hardObstacles = [[]];\n    this.expertObstacles = [[]];\n    this.obstacles = [];\n    this.qBoxImages = [QBoxHandling, QBoxMiniBall];\n    this.obstacles.push( /*#__PURE__*/_jsxDEV(Tile, {\n      image: this.state.tileImage,\n      height: 100,\n      width: 100,\n      xPos: 800,\n      yPos: this.state.screenHeight - 50\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 29\n    }, this));\n    this.generateObstacles(this.state.difficulty);\n    window.addEventListener('keydown', this.handleKeyDown);\n    this.gameLoop();\n  }\n\n  generateObstacles(difficulty) {\n    switch (difficulty) {\n      case 1:\n        for (let i = 0; i < 10; i++) {\n          this.plebianObstacles = this.plebianObstacles(i * this.state.screenWidth);\n          let index = Math.round(Math.random() * this.plebianObstacles.length);\n          this.obstacles.push(this.plebianObstacles[index]);\n        }\n\n        break;\n\n      case 2:\n        for (let i = 0; i < 10; i++) {\n          this.easyObstacles = this.easyObstacles(i * this.state.screenWidth);\n          let index = Math.round(Math.random() * this.easyObstacles.length);\n          this.obstacles.push(this.easyObstacles[index]);\n        }\n\n        break;\n\n      case 3:\n        for (let i = 0; i < 10; i++) {\n          this.mediumObstacles = this.setMediumObstacles(i * this.state.screenWidth + 800);\n          let index = Math.round(Math.random() * this.mediumObstacles.length);\n          this.obstacles.push(this.mediumObstacles[index]);\n        }\n\n        break;\n\n      case 4:\n        for (let i = 0; i < 10; i++) {\n          this.hardObstacles = this.hardObstacles(i * this.state.screenWidth);\n          let index = Math.round(Math.random() * this.hardObstacles.length);\n          this.obstacles.push(this.hardObstacles[index]);\n        }\n\n        break;\n\n      case 5:\n        for (let i = 0; i < 10; i++) {\n          this.expertObstacles = this.expertObstacles(i * this.state.screenWidth);\n          let index = Math.round(Math.random() * this.expertObstacles.length);\n          this.obstacles.push(this.expertObstacles[index]);\n        }\n\n        break;\n    }\n  }\n\n  plebianObstacles(x) {}\n\n  easyObstacles(x) {}\n\n  setMediumObstacles(x) {\n    let temp = [[]];\n    temp[0].push( /*#__PURE__*/_jsxDEV(Tile, {\n      tileImage: this.state.tileImage,\n      height: 100,\n      width: 100,\n      xPos: x + 100\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 22\n    }, this));\n    return temp;\n  }\n\n  hardObstacles(x) {}\n\n  expertObstacles(x) {}\n\n  gameLoop() {\n    let timeoutId = setTimeout(() => {\n      if (!this.state.isGameOver) {\n        if (this.state.qboxanim) this.setState({\n          time2: 20000 - new Date().getTime() + this.state.time1\n        });\n        if (this.state.springanim && this.state.yPos < 400) this.setState({\n          springanim: false\n        });\n        if (this.state.time2 < 0) this.setState({\n          qboxanim: false,\n          xAcceleration: 4,\n          ballsize: 40,\n          gravity: this.state.difficulty / 2\n        });\n        this.changeDirection();\n        if (this.state.yPos > this.state.screenHeight - 30) this.resetGame();\n        this.setState({\n          keyPressed: false,\n          ballDirection: 'zero acceleration'\n        });\n        this.fall();\n      }\n\n      this.gameLoop();\n    }, this.state.gameLoopTimeout);\n    this.setState({\n      timeoutId\n    });\n  }\n\n  resetGame() {\n    let attempts = this.state.attempts;\n    this.obstacles = [];\n    this.obstacles.push( /*#__PURE__*/_jsxDEV(Tile, {\n      height: 100,\n      width: 100,\n      xPos: 800,\n      yPos: this.state.screenHeight - 50\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 29\n    }, this));\n    this.generateObstacles(this.state.difficulty);\n    this.setState({\n      xPos: 0,\n      yPos: 150,\n      ballSize: 40,\n      gravity: this.props.difficulty / 2,\n      ballDirection: '',\n      timeoutId: 0,\n      ballSpeedY: 0,\n      ballSpeedX: 0,\n      keyPressed: false,\n      bounced: false,\n      attempts: attempts + 1,\n      qboxanim: false,\n      springanim: false,\n      xAcceleration: 4,\n      time1: 0,\n      time2: 0\n    });\n  }\n\n  fall() {\n    let grav = this.state.gravity;\n    let ball_speed = this.state.ballSpeedY;\n    let y = this.state.yPos;\n\n    if (this.isThereCollision(this.obstacles) && !this.state.bounced) {\n      if (this.state.collidedObj.type === Tile) {\n        ball_speed *= -1;\n        ball_speed += this.state.difficulty;\n        this.setState({\n          bounced: true,\n          ballSpeedY: ball_speed,\n          yPos: y + ball_speed\n        });\n      } else if (this.state.collidedObj.type === QuestionBox && !this.state.qboxanim) {\n        let rand = Math.round(Math.random() * 2);\n        this.setState({\n          qboxanim: true\n        });\n        if (this.qBoxImages[rand] === QBoxHandling) this.setState({\n          qBoxImage: QBoxHandling,\n          xAcceleration: 15,\n          time1: new Date().getTime()\n        });else if (this.qBoxImages[rand] === QBoxMiniBall) this.setState({\n          qBoxImage: QBoxMiniBall,\n          ballSize: 20,\n          gravity: this.state.gravity * 2 / 3,\n          time1: new Date().getTime()\n        });\n      } else if (this.state.collidedObj.type === Spring) {\n        ball_speed = -16 - grav * 16;\n        this.setState({\n          springanim: true,\n          bounced: true,\n          ballSpeedY: ball_speed,\n          yPos: y + ball_speed\n        });\n      }\n    } else if (!this.isThereCollision(this.obstacles) && this.state.bounced) {\n      this.setState({\n        bounced: false\n      });\n    }\n\n    this.setState({\n      ballSpeedY: ball_speed + grav,\n      yPos: y + ball_speed\n    });\n  }\n\n  isThereCollision(arr) {\n    let ball = {\n      x: this.state.xPos + this.state.ballSize / 2,\n      y: this.state.yPos + this.state.ballSize,\n      width: this.state.ballSize,\n      height: this.state.ballSize\n    };\n    let collidedObj = arr.find(a => {\n      if (a === undefined || a.props === undefined) return false;\n      let obstacle = {\n        x: a.props.xPos - 800,\n        y: a.props.yPos,\n        width: a.props.width,\n        height: a.props.height\n      };\n\n      if (ball.x < obstacle.x + obstacle.width && ball.x > obstacle.x && ball.y + this.getSpeedY >= obstacle.y && ball.y <= obstacle.y + obstacle.height) {\n        this.setState({\n          collidedObj: a\n        });\n        return true;\n      }\n\n      return false;\n    });\n    return collidedObj;\n  }\n\n  changeDirection() {\n    switch (this.state.ballDirection) {\n      case 'left':\n        this.moveSideways('left');\n        break;\n\n      case 'right':\n        this.moveSideways('right');\n        break;\n\n      case 'zero acceleration':\n        this.moveSideways('zero acceleration');\n        break;\n\n      default:\n    }\n  }\n\n  moveSideways(dir) {\n    let acceleration = this.state.xAcceleration;\n    let ball_speed = this.state.ballSpeedX;\n    if (dir === 'left') acceleration = acceleration * -1;\n    if (dir === 'zero acceleration') acceleration = 0;\n    if (ball_speed < this.state.maxSpeed && ball_speed > this.state.maxSpeed * -1 || ball_speed >= this.state.maxSpeed && acceleration < 0 || ball_speed <= this.state.maxSpeed * -1 && acceleration > 0) ball_speed += acceleration;\n    if (this.state.xPos < -800 && dir === 'left') ball_speed = 0;\n    let x = this.state.xPos + ball_speed;\n    this.setState({\n      ballSpeedX: ball_speed,\n      xPos: x\n    });\n  }\n\n  handleKeyDown(event) {\n    switch (event.keyCode) {\n      case 37:\n        this.setState({\n          ballDirection: 'left'\n        });\n        break;\n\n      case 39:\n        this.setState({\n          ballDirection: 'right'\n        });\n        break;\n\n      default:\n    }\n\n    this.setState({\n      keyPressed: true\n    });\n  }\n\n  componentWillUnmount() {\n    clearTimeout(this.state.timeoutId);\n    window.removeEventListener('keydown', this.handleKeyDown);\n  }\n\n  render() {\n    if (this.state.isGameOver) {\n      return /*#__PURE__*/_jsxDEV(GameOver, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 17\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"background\",\n          style: {\n            left: -1 * this.state.xPos / 2,\n            backgroundImage: 'url(' + this.state.background + ')'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"fill_screen\",\n          style: {\n            left: -1 * this.state.xPos\n          },\n          children: [this.obstacles, this.state.springanim ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"springanim\",\n            style: {\n              top: this.state.screenHeight - 100,\n              marginLeft: 1000,\n              backgroundImage: 'url(' + SpringImage + ')'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 50\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 184\n          }, this), /*#__PURE__*/_jsxDEV(Ball, {\n            xPos: 800 + this.state.xPos,\n            yPos: this.state.yPos,\n            height: this.state.ballSize\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"attempt\",\n            style: {\n              left: -1 * this.state.xPos\n            },\n            children: [\"Attempt: \", this.state.attempts]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 21\n        }, this), this.state.qboxanim ? /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"time\",\n          children: this.state.time2\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 44\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 88\n        }, this), this.state.qboxanim ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"qboxanim\",\n          style: {\n            backgroundImage: 'url(' + this.state.qBoxImage + ')'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 44\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 133\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 17\n      }, this);\n    }\n  }\n\n}\n\nexport default LineRiderGame;","map":{"version":3,"sources":["C:/Users/thatt/winter-project/the-app/src/Important Pages/LineRiderGame.js"],"names":["React","GameOver","Ball","Tile","QuestionBox","QBoxHandling","QBoxMiniBall","Spring","SpringImage","Laser","Arrow","Sword","MovingPlatform","LineRiderGame","Component","constructor","props","handleKeyDown","bind","state","screenWidth","screenHeight","yPos","xPos","ballDirection","timeoutId","gameLoopTimeout","ballSpeedY","ballSpeedX","maxSpeed","gravity","difficulty","xAcceleration","ballSize","keyPressed","bounced","isGameover","loggedIn","setName","attempts","background","collidedObj","qboxanim","springanim","time1","time2","qBoxImage","tileImage","componentDidMount","plebianObstacles","easyObstacles","mediumObstacles","hardObstacles","expertObstacles","obstacles","qBoxImages","push","generateObstacles","window","addEventListener","gameLoop","i","index","Math","round","random","length","setMediumObstacles","x","temp","setTimeout","isGameOver","setState","Date","getTime","ballsize","changeDirection","resetGame","fall","grav","ball_speed","y","isThereCollision","type","rand","arr","ball","width","height","find","a","undefined","obstacle","getSpeedY","moveSideways","dir","acceleration","event","keyCode","componentWillUnmount","clearTimeout","removeEventListener","render","left","backgroundImage","top","marginLeft"],"mappings":"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","sourcesContent":["import './LineRiderGame.css'\r\nimport React from 'react'\r\nimport GameOver from './GameOver.js'\r\nimport Ball from '../Components/Ball'\r\nimport Tile from '../Components/Tile'\r\nimport QuestionBox from '../Components/QuestionBox'\r\nimport QBoxHandling from '../Components/Images/question_box_handling.png'\r\nimport QBoxMiniBall from '../Components/Images/question_box_mini_ball.png'\r\nimport Spring from '../Components/Spring'\r\nimport SpringImage from '../Components/Images/spring.png'\r\nimport Laser from '../Components/Laser'\r\nimport Arrow from '../Components/Arrow'\r\nimport Sword from '../Components/Sword'\r\nimport MovingPlatform from '../Components/MovingTile'\r\n\r\nclass LineRiderGame extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        \r\n        this.handleKeyDown = this.handleKeyDown.bind(this)\r\n\r\n        this.state = {\r\n            screenWidth: 1620,\r\n            screenHeight: 977,\r\n            yPos: 150,\r\n            xPos: 0,\r\n            ballDirection: '',\r\n            timeoutId: 0,\r\n            gameLoopTimeout: 50,\r\n            ballSpeedY: 0,\r\n            ballSpeedX: 0,\r\n            maxSpeed: 30,\r\n            gravity: props.difficulty/2,\r\n            xAcceleration: 4,\r\n            ballSize: 40,\r\n            keyPressed: false,\r\n            bounced: false,\r\n            isGameover: false,\r\n            loggedIn: false,\r\n            setName: '',\r\n            attempts: 1,\r\n            difficulty: props.difficulty,\r\n            background: props.background,\r\n            collidedObj: <Tile/>,\r\n            qboxanim: false,\r\n            springanim: false,\r\n            time1: 0,\r\n            time2: 0,\r\n            qBoxImage: QBoxHandling,\r\n            tileImage: props.tileImage,\r\n        }\r\n\r\n    }\r\n    \r\n    componentDidMount() {\r\n        this.plebianObstacles = [[]]\r\n        this.easyObstacles = [[]]\r\n        this.mediumObstacles = [[]]\r\n        this.hardObstacles = [[]]\r\n        this.expertObstacles = [[]]\r\n        this.obstacles = []\r\n        this.qBoxImages = [QBoxHandling,QBoxMiniBall]\r\n        this.obstacles.push(<Tile image= {this.state.tileImage} height= {100} width= {100} xPos={800} yPos={this.state.screenHeight - 50}/>)\r\n        this.generateObstacles(this.state.difficulty)\r\n        window.addEventListener('keydown', this.handleKeyDown)\r\n        this.gameLoop()\r\n    }\r\n\r\n    generateObstacles(difficulty) {\r\n        switch (difficulty) {\r\n            case 1:\r\n                for (let i = 0; i < 10; i++) {\r\n                    this.plebianObstacles = this.plebianObstacles(i*this.state.screenWidth)\r\n                    let index = Math.round(Math.random()*this.plebianObstacles.length)\r\n                    this.obstacles.push(this.plebianObstacles[index])\r\n                }\r\n                break\r\n            case 2:\r\n                for (let i = 0; i < 10; i++) {\r\n                    this.easyObstacles = this.easyObstacles(i*this.state.screenWidth)\r\n                    let index = Math.round(Math.random()*this.easyObstacles.length)\r\n                    this.obstacles.push(this.easyObstacles[index])\r\n                }\r\n                break\r\n            case 3:\r\n                for (let i = 0; i < 10; i++) {\r\n                    this.mediumObstacles = this.setMediumObstacles(i*this.state.screenWidth + 800)\r\n                    let index = Math.round(Math.random()*this.mediumObstacles.length)\r\n                    this.obstacles.push(this.mediumObstacles[index])\r\n                }\r\n                break\r\n            case 4:\r\n                for (let i = 0; i < 10; i++) {\r\n                    this.hardObstacles = this.hardObstacles(i*this.state.screenWidth)\r\n                    let index = Math.round(Math.random()*this.hardObstacles.length)\r\n                    this.obstacles.push(this.hardObstacles[index])\r\n                }\r\n                break;\r\n            case 5:\r\n                for (let i = 0; i < 10; i++) {\r\n                    this.expertObstacles = this.expertObstacles(i*this.state.screenWidth)\r\n                    let index = Math.round(Math.random()*this.expertObstacles.length)\r\n                    this.obstacles.push(this.expertObstacles[index])\r\n                }\r\n                break;\r\n        }\r\n    }\r\n\r\n    plebianObstacles(x) {\r\n\r\n    }\r\n    easyObstacles(x) {\r\n\r\n    }\r\n    setMediumObstacles(x) {\r\n        let temp = [[]]\r\n        temp[0].push(<Tile tileImage={this.state.tileImage} height= {100} width= {100} xPos= {x+100}/>)\r\n        return temp\r\n    }\r\n    hardObstacles(x){\r\n\r\n    }\r\n    expertObstacles(x) {\r\n\r\n    }\r\n\r\n    gameLoop() {\r\n        let timeoutId = setTimeout(() => {\r\n            if (!this.state.isGameOver) {\r\n                if (this.state.qboxanim) this.setState({time2: 20000 - new Date().getTime() + this.state.time1})\r\n                if (this.state.springanim && this.state.yPos < 400) this.setState({springanim:false})\r\n                if (this.state.time2 < 0) this.setState({qboxanim:false, xAcceleration: 4, ballsize: 40, gravity: this.state.difficulty/2})\r\n                this.changeDirection()\r\n                if (this.state.yPos > this.state.screenHeight-30) this.resetGame()\r\n                this.setState({ keyPressed: false, ballDirection: 'zero acceleration' })\r\n                this.fall()\r\n            }\r\n            this.gameLoop()\r\n          }, this.state.gameLoopTimeout)\r\n        this.setState({ timeoutId })\r\n    }\r\n    \r\n    resetGame() {\r\n        let attempts = this.state.attempts\r\n        this.obstacles= []\r\n        this.obstacles.push(<Tile height= {100} width = {100} xPos={800} yPos={this.state.screenHeight - 50}/>)\r\n        this.generateObstacles(this.state.difficulty)\r\n        this.setState({\r\n            xPos: 0,\r\n            yPos: 150,\r\n            ballSize: 40,\r\n            gravity: this.props.difficulty/2,\r\n            ballDirection: '',\r\n            timeoutId: 0,\r\n            ballSpeedY: 0,\r\n            ballSpeedX: 0,\r\n            keyPressed: false,\r\n            bounced: false,\r\n            attempts: attempts + 1,\r\n            qboxanim: false,\r\n            springanim: false,\r\n            xAcceleration: 4,\r\n            time1: 0,\r\n            time2: 0,\r\n        })\r\n    }\r\n\r\n    fall() {\r\n        let grav = this.state.gravity\r\n        let ball_speed = this.state.ballSpeedY\r\n        let y = this.state.yPos\r\n        if (this.isThereCollision(this.obstacles) && !this.state.bounced) {\r\n            if (this.state.collidedObj.type === Tile) {\r\n                ball_speed *= -1\r\n                ball_speed += this.state.difficulty\r\n                this.setState({bounced: true, ballSpeedY: ball_speed, yPos: y + ball_speed})\r\n            }\r\n            else if (this.state.collidedObj.type === QuestionBox && !this.state.qboxanim) {\r\n                let rand = Math.round(Math.random()*2)\r\n                this.setState({qboxanim: true})\r\n                if (this.qBoxImages[rand] === QBoxHandling) this.setState({qBoxImage: QBoxHandling, xAcceleration: 15, time1: new Date().getTime()})\r\n                else if (this.qBoxImages[rand] === QBoxMiniBall) this.setState({qBoxImage: QBoxMiniBall, ballSize: 20, gravity: this.state.gravity*2/3, time1: new Date().getTime()})\r\n            }\r\n            else if (this.state.collidedObj.type === Spring) {\r\n                ball_speed = -16-grav*16\r\n                this.setState({springanim: true, bounced: true, ballSpeedY: ball_speed, yPos: y + ball_speed})\r\n            }\r\n        }\r\n        else if (!this.isThereCollision(this.obstacles) && this.state.bounced) {\r\n            this.setState({bounced: false})\r\n        }\r\n        this.setState({ballSpeedY: ball_speed + grav, yPos: y + ball_speed})\r\n    }\r\n\r\n    isThereCollision(arr) {\r\n        let ball = {x: this.state.xPos + this.state.ballSize/2, y: this.state.yPos + this.state.ballSize, \r\n                    width: this.state.ballSize, height: this.state.ballSize}\r\n        let collidedObj = arr.find(a => {\r\n            if (a === undefined || a.props === undefined) return false\r\n            let obstacle = {x: a.props.xPos - 800, y: a.props.yPos, width: a.props.width, height: a.props.height}\r\n            if (ball.x < obstacle.x + obstacle.width && ball.x > obstacle.x &&\r\n                ball.y + this.getSpeedY >= obstacle.y && ball.y <= obstacle.y+obstacle.height) {\r\n                    this.setState({collidedObj: a})\r\n                    return true\r\n                }\r\n            return false\r\n        })\r\n\r\n        return collidedObj\r\n    }\r\n\r\n    changeDirection() {\r\n        switch (this.state.ballDirection) {\r\n          case 'left':\r\n              this.moveSideways('left')\r\n            break\r\n          case 'right':\r\n              this.moveSideways('right')\r\n              break\r\n          case 'zero acceleration':\r\n              this.moveSideways('zero acceleration')\r\n            break\r\n          default:\r\n        }\r\n    }\r\n\r\n    moveSideways(dir) {\r\n        let acceleration = this.state.xAcceleration\r\n        let ball_speed = this.state.ballSpeedX\r\n        if (dir === 'left')\r\n            acceleration = acceleration * -1\r\n        if (dir === 'zero acceleration')\r\n            acceleration = 0\r\n        if ((ball_speed < this.state.maxSpeed && ball_speed > this.state.maxSpeed*-1)\r\n            || (ball_speed >= this.state.maxSpeed && acceleration < 0) || (ball_speed <= this.state.maxSpeed*-1 && acceleration > 0))\r\n            ball_speed += acceleration\r\n        if (this.state.xPos < -800 && dir === 'left')\r\n            ball_speed = 0\r\n        let x = this.state.xPos + ball_speed\r\n        this.setState({\r\n            ballSpeedX: ball_speed,\r\n            xPos: x\r\n        })\r\n    }\r\n\r\n    handleKeyDown(event) {\r\n        switch (event.keyCode) {\r\n            case 37:\r\n                this.setState({ ballDirection: 'left' })\r\n                break\r\n            case 39:\r\n                this.setState({ ballDirection: 'right' })\r\n                break\r\n            default:\r\n        }\r\n        this.setState({\r\n            keyPressed: true\r\n        })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.state.timeoutId)\r\n        window.removeEventListener('keydown', this.handleKeyDown)\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isGameOver) {\r\n            return (\r\n                <GameOver/>\r\n            )\r\n        }\r\n        else {\r\n            return(\r\n                <div>\r\n                    <div id = \"background\" style= {{left: -1*this.state.xPos/2, backgroundImage: 'url('+this.state.background+')'}}/>\r\n                    <div id= \"fill_screen\" style= {{left: -1*this.state.xPos}}>\r\n                        {this.obstacles}\r\n                        {this.state.springanim ? <div className= \"springanim\" style= {{top: this.state.screenHeight-100, marginLeft: 1000, backgroundImage: 'url('+SpringImage+')'}}/>:<div/>}\r\n                        <Ball xPos= {800 + this.state.xPos}\r\n                        yPos={this.state.yPos}\r\n                        height={this.state.ballSize}/>\r\n                        <p className= \"attempt\" style= {{left: -1*this.state.xPos}}>Attempt: {this.state.attempts}</p>\r\n                    </div>\r\n                    {this.state.qboxanim ? <p className= \"time\">{this.state.time2}</p>:<p/>}\r\n                    {this.state.qboxanim ? <div className= \"qboxanim\" style= {{backgroundImage: 'url('+this.state.qBoxImage+')'}}/>:<div/>}\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\nexport default LineRiderGame"]},"metadata":{},"sourceType":"module"}