[{"C:\\Users\\thatt\\winter-project\\the-app\\src\\index.js":"1","C:\\Users\\thatt\\winter-project\\the-app\\src\\reportWebVitals.js":"2","C:\\Users\\thatt\\winter-project\\the-app\\src\\Components\\Login.js":"3","C:\\Users\\thatt\\winter-project\\the-app\\src\\Components\\Logout.js":"4","C:\\Users\\thatt\\winter-project\\the-app\\src\\Components\\refreshToken.js":"5","C:\\Users\\thatt\\winter-project\\the-app\\src\\LoginLogout.js":"6","C:\\Users\\thatt\\winter-project\\the-app\\src\\Important Pages\\IntroPage.js":"7","C:\\Users\\thatt\\winter-project\\the-app\\src\\Important Pages\\LineRiderGame.js":"8","C:\\Users\\thatt\\winter-project\\the-app\\src\\Important Pages\\GameOver.js":"9","C:\\Users\\thatt\\winter-project\\the-app\\src\\Components\\Ball.js":"10","C:\\Users\\thatt\\winter-project\\the-app\\src\\Components\\Tile.js":"11","C:\\Users\\thatt\\winter-project\\the-app\\src\\Important Pages\\IntroByCam\\CamIntro.js":"12"},{"size":596,"mtime":1613697376288,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":499162500000,"results":"15","hashOfConfig":"14"},{"size":1184,"mtime":1611897921140,"results":"16","hashOfConfig":"14"},{"size":661,"mtime":1611894490775,"results":"17","hashOfConfig":"14"},{"size":712,"mtime":1611893497276,"results":"18","hashOfConfig":"14"},{"size":872,"mtime":1611898644028,"results":"19","hashOfConfig":"14"},{"size":4308,"mtime":1613708120672,"results":"20","hashOfConfig":"14"},{"size":7650,"mtime":1613531288805,"results":"21","hashOfConfig":"14"},{"size":219,"mtime":1611906767997,"results":"22","hashOfConfig":"14"},{"size":386,"mtime":1613106813659,"results":"23","hashOfConfig":"14"},{"size":274,"mtime":1613105753407,"results":"24","hashOfConfig":"14"},{"size":1636,"mtime":1613535632306,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},"s7ig4d",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"29"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"29"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"29"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"29"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"29"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"C:\\Users\\thatt\\winter-project\\the-app\\src\\index.js",["57"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport IntroPage from './Important Pages/IntroPage.js'\nimport reportWebVitals from './reportWebVitals';\nimport CamIntro from './Important Pages/IntroByCam/CamIntro'\n\nReactDOM.render(\n  <React.StrictMode>\n    <IntroPage/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["58","59"],"C:\\Users\\thatt\\winter-project\\the-app\\src\\reportWebVitals.js",[],"C:\\Users\\thatt\\winter-project\\the-app\\src\\Components\\Login.js",["60","61","62","63"],"import React, { useState } from 'react'\r\n\r\nimport { GoogleLogin } from 'react-google-login';\r\n// refresh token\r\nimport { refreshTokenSetup } from './refreshToken';\r\n\r\nconst clientId = '80121214064-nil032tgbsspcmdhr1mepqan77mqa2i0.apps.googleusercontent.com'\r\n\r\nfunction Login(props) {\r\n\r\n    const [clickedLoginButton, setClickedLoginButton] = useState(false)\r\n    const [name, setName] = useState()\r\n\r\n  const onSuccess = (res) => {\r\n    console.log('Login Success: currentUser:', res.profileObj);\r\n    alert(\r\n      `Logged in successfully! Welcome ${res.profileObj.name} 😍. \\n See console for full profile object.`\r\n    );\r\n    refreshTokenSetup(res);\r\n    props.setLoggedIn(true);\r\n    props.setName(res.profileObj.name)\r\n  };\r\n\r\n  const onFailure = (res) => {\r\n    console.log('Login failed: res:', res);\r\n    alert(\r\n      `Failed to login 😢. Please try again`\r\n    );\r\n  };\r\n\r\n  \r\n  return (\r\n\r\n    <div>\r\n      <GoogleLogin\r\n        clientId={clientId}\r\n        buttonText=\"Login\"\r\n        onSuccess={onSuccess}\r\n        onFailure={onFailure}\r\n        cookiePolicy={'single_host_origin'}\r\n        isSignedIn={true}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;","C:\\Users\\thatt\\winter-project\\the-app\\src\\Components\\Logout.js",["64","65"],"import React, { useState } from 'react';\r\nimport { GoogleLogout } from 'react-google-login';\r\n\r\nconst clientId = '80121214064-nil032tgbsspcmdhr1mepqan77mqa2i0.apps.googleusercontent.com'\r\n\r\nfunction Logout(props) {\r\n\r\n    const [clickedLogoutButton, setClickedLogoutButton] = useState(false)\r\n\r\n  const onSuccess = () => {\r\n    console.log('Logout made successfully');\r\n    alert('Logout made successfully ✌');\r\n    props.setLoggedIn(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <GoogleLogout\r\n        clientId={clientId}\r\n        buttonText=\"Logout\"\r\n        onLogoutSuccess={onSuccess}\r\n      ></GoogleLogout>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Logout;","C:\\Users\\thatt\\winter-project\\the-app\\src\\Components\\refreshToken.js",[],"C:\\Users\\thatt\\winter-project\\the-app\\src\\LoginLogout.js",[],"C:\\Users\\thatt\\winter-project\\the-app\\src\\Important Pages\\IntroPage.js",[],"C:\\Users\\thatt\\winter-project\\the-app\\src\\Important Pages\\LineRiderGame.js",["66"],"import './LineRiderGame.css'\r\nimport React from 'react'\r\nimport GameOver from './GameOver.js'\r\nimport Ball from '../Components/Ball'\r\nimport Tile from '../Components/Tile'\r\nimport tileImage from '../Backgrounds/tile.jpg'\r\n\r\nclass LineRiderGame extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        \r\n        this.handleKeyDown = this.handleKeyDown.bind(this)\r\n\r\n        this.state = {\r\n            yPos: 150,\r\n            xPos: 0,\r\n            ballDirection: '',\r\n            timeoutId: 0,\r\n            gameLoopTimeout: 50,\r\n            ballSpeedY: 0,\r\n            ballSpeedX: 0,\r\n            maxSpeed: 30,\r\n            gravity: props.difficulty/2,\r\n            xAcceleration: 4,\r\n            ballSize: 40,\r\n            keyPressed: false,\r\n            bounced: false,\r\n            isGameover: false,\r\n            loggedIn: false,\r\n            setName: '',\r\n            attempts: 1,\r\n            difficulty: props.difficulty,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.tiles = []\r\n        this.usedTileSpawningPoints = []\r\n        this.initiateTiles()\r\n        window.addEventListener('keydown', this.handleKeyDown)\r\n        this.gameLoop()\r\n    }\r\n\r\n    initiateTiles() {\r\n        this.tiles.push(<Tile image={tileImage} height= {100} xPos={800} yPos={document.getElementById(\"fill_screen\").clientHeight - 50}/>)\r\n        for (let j = 0; j < 2; j++) {\r\n            this.usedTileSpawningPoints.push(j)\r\n            let tileCount = 8 - Math.floor(Math.random() * (this.state.difficulty))\r\n            for (let i = 0; i < tileCount; i++) {\r\n                let x = (j*800) + Math.floor(Math.random() * 8) * 100\r\n                let y = document.getElementById(\"fill_screen\").clientHeight - 50            \r\n                \r\n                this.tiles.push(<Tile image={tileImage} height= {100} xPos={x} yPos={y}/>)\r\n            }\r\n        }\r\n    }\r\n\r\n    resetGame() {\r\n        let attempts = this.state.attempts\r\n        this.tiles= []\r\n        this.usedTileSpawningPoints = []\r\n        this.initiateTiles()\r\n        this.setState({\r\n            xPos: 0,\r\n            yPos: 150,\r\n            ballDirection: '',\r\n            timeoutId: 0,\r\n            ballSpeedY: 0,\r\n            ballSpeedX: 0,\r\n            keyPressed: false,\r\n            bounced: false,\r\n            attempts: attempts + 1,\r\n        })\r\n    }\r\n\r\n    createGround() {\r\n        let ground = this.tiles\r\n        this.tiles = []\r\n        this.usedTileSpawningPoints = []\r\n        this.usedTileSpawningPoints.push(Math.floor(this.state.xPos/800)+1)\r\n        let tileCount = 8 - Math.floor(Math.random() * (this.state.difficulty))\r\n        for (let i = 0; i < tileCount; i++) {\r\n            let x = Math.floor(this.state.xPos/800)*800 + 800 + Math.floor(Math.random() * 8) * 100\r\n            let y = document.getElementById(\"fill_screen\").clientHeight - 50            \r\n            \r\n            this.tiles.push(<Tile image={tileImage} height= {100} xPos={x} yPos={y}/>)\r\n        }\r\n        this.tiles.push(ground)\r\n    }\r\n\r\n    gameLoop() { \r\n\r\n        let timeoutId = setTimeout(() => {\r\n            if (!this.state.isGameOver) {\r\n              if (this.state.xPos % 800 <= this.state.ballSpeedX && this.state.xPos % 800 > 0 && this.state.xPos > this.state.maxSpeed\r\n                && !this.spawnedTilesAt(Math.floor(this.state.xPos/800)+1))\r\n                this.createGround()\r\n              this.changeDirection()\r\n              if (this.state.yPos > document.getElementById(\"fill_screen\").clientHeight)\r\n                this.resetGame()\r\n              this.setState({ keyPressed: false, ballDirection: 'zero acceleration' })\r\n              this.fall()\r\n            }\r\n      \r\n            this.gameLoop()\r\n          }, this.state.gameLoopTimeout)\r\n      \r\n        this.setState({ timeoutId })\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearTimeout(this.state.timeoutId)\r\n        window.removeEventListener('keydown', this.handleKeyDown)\r\n    }\r\n\r\n    fall() {\r\n        let grav = this.state.gravity\r\n        let ball_speed = this.state.ballSpeedY\r\n        let y = this.state.yPos + ball_speed\r\n        if (this.isThereCollision(this.tiles) && !this.state.bounced) {\r\n            ball_speed *= -1\r\n            this.setState({bounced: true})\r\n        }\r\n        if (!this.isThereCollision(this.tiles) && this.state.bounced) {\r\n            this.setState({bounced: false})\r\n        }\r\n        this.setState({\r\n            ballSpeedY: ball_speed + grav,\r\n            yPos: y})\r\n    }\r\n\r\n    isThereCollision(arr) {\r\n        let ball = {x: this.state.xPos + this.state.ballSize/2, y: this.state.yPos + this.state.ballSize + this.state.ballSpeedY*7/4, \r\n                    width: this.state.ballSize, height: this.state.ballSize}\r\n        let collided = arr.find(a => {\r\n            if (a.props === undefined)\r\n                return false\r\n            let tile = {x: a.props.xPos - 800, y: a.props.yPos, width: a.props.height, height: a.props.height}\r\n            if (ball.x < tile.x + tile.width && ball.x > tile.x &&\r\n                ball.y >= tile.y)\r\n                return true\r\n            return false\r\n        })\r\n\r\n        return collided\r\n    }\r\n\r\n    spawnedTilesAt(xPos) {\r\n        for (let i = 0; i < this.usedTileSpawningPoints; i++) {\r\n            if (this.usedTileSpawningPoints[i] == xPos)\r\n                return true\r\n        }\r\n        return false\r\n    }\r\n\r\n    changeDirection() {\r\n        switch (this.state.ballDirection) {\r\n          case 'left':\r\n              this.moveSideways('left')\r\n            break\r\n          case 'right':\r\n              this.moveSideways('right')\r\n              break\r\n          case 'zero acceleration':\r\n              this.moveSideways('zero acceleration')\r\n            break\r\n          default:\r\n        }\r\n    }\r\n\r\n    moveSideways(dir) {\r\n        let acceleration = this.state.xAcceleration\r\n        let ball_speed = this.state.ballSpeedX\r\n        if (dir === 'left')\r\n            acceleration = acceleration * -1\r\n        if (dir === 'zero acceleration')\r\n            acceleration = 0\r\n        if ((ball_speed < this.state.maxSpeed && ball_speed > this.state.maxSpeed*-1)\r\n            || (ball_speed >= this.state.maxSpeed && acceleration < 0) || (ball_speed <= this.state.maxSpeed*-1 && acceleration > 0))\r\n            ball_speed += acceleration\r\n        let x = this.state.xPos + ball_speed\r\n        this.setState({\r\n            ballSpeedX: ball_speed,\r\n            xPos: x\r\n        })\r\n    }\r\n\r\n    handleKeyDown(event) {\r\n        switch (event.keyCode) {\r\n            case 37:\r\n                this.setState({ ballDirection: 'left' })\r\n                break\r\n            case 39:\r\n                this.setState({ ballDirection: 'right' })\r\n                break\r\n            default:\r\n        }\r\n        this.setState({\r\n            keyPressed: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isGameOver) {\r\n            return (\r\n                <GameOver/>\r\n            )\r\n        }\r\n        else {\r\n            return(\r\n                <div>\r\n                    <div id = \"background\" style= {{left: -1*this.state.xPos/2}}/>\r\n                    <div id= \"fill_screen\" style= {{left: -1*this.state.xPos}}>\r\n                        {this.tiles}\r\n                        <Ball xPos= {800 + this.state.xPos}\r\n                        yPos={this.state.yPos}\r\n                        height={this.state.ballSize}/>\r\n                        <p className= \"colored_text\" style= {{left: -1*this.state.xPos}}>Attempt: {this.state.attempts}</p>\r\n                    </div>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n}\r\nexport default LineRiderGame\r\n","C:\\Users\\thatt\\winter-project\\the-app\\src\\Important Pages\\GameOver.js",[],"C:\\Users\\thatt\\winter-project\\the-app\\src\\Components\\Ball.js",["67"],"import React from 'react'\r\nimport './Ball.css'\r\n\r\nfunction Ball(props) {\r\n    return (\r\n        <img src= \"https://clipart.info/images/ccovers/1495749720Bowling-Ball-PNG-Clip-Art.png\"\r\n        style= {{height: props.ballSize, \r\n            top: props.yPos}} \r\n            id= \"ball-image\"\r\n            className = 'Ball'/>\r\n    )\r\n}\r\n\r\nexport default Ball","C:\\Users\\thatt\\winter-project\\the-app\\src\\Components\\Tile.js",["68"],"import React from 'react'\r\n\r\nfunction Tile(props) {\r\n    return (\r\n        <img src= {props.image}\r\n            style= {{height: props.height,\r\n            position: \"absolute\",\r\n            left: props.xPos,\r\n            top: props.yPos}}/>\r\n    )\r\n}\r\n\r\nexport default Tile","C:\\Users\\thatt\\winter-project\\the-app\\src\\Important Pages\\IntroByCam\\CamIntro.js",[],{"ruleId":"69","severity":1,"message":"70","line":6,"column":8,"nodeType":"71","messageId":"72","endLine":6,"endColumn":16},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"69","severity":1,"message":"77","line":11,"column":12,"nodeType":"71","messageId":"72","endLine":11,"endColumn":30},{"ruleId":"69","severity":1,"message":"78","line":11,"column":32,"nodeType":"71","messageId":"72","endLine":11,"endColumn":53},{"ruleId":"69","severity":1,"message":"79","line":12,"column":12,"nodeType":"71","messageId":"72","endLine":12,"endColumn":16},{"ruleId":"69","severity":1,"message":"80","line":12,"column":18,"nodeType":"71","messageId":"72","endLine":12,"endColumn":25},{"ruleId":"69","severity":1,"message":"81","line":8,"column":12,"nodeType":"71","messageId":"72","endLine":8,"endColumn":31},{"ruleId":"69","severity":1,"message":"82","line":8,"column":33,"nodeType":"71","messageId":"72","endLine":8,"endColumn":55},{"ruleId":"83","severity":1,"message":"84","line":150,"column":48,"nodeType":"85","messageId":"86","endLine":150,"endColumn":50},{"ruleId":"87","severity":1,"message":"88","line":6,"column":9,"nodeType":"89","endLine":11,"endColumn":33},{"ruleId":"87","severity":1,"message":"88","line":5,"column":9,"nodeType":"89","endLine":9,"endColumn":32},"no-unused-vars","'CamIntro' is defined but never used.","Identifier","unusedVar","no-native-reassign",["90"],"no-negated-in-lhs",["91"],"'clickedLoginButton' is assigned a value but never used.","'setClickedLoginButton' is assigned a value but never used.","'name' is assigned a value but never used.","'setName' is assigned a value but never used.","'clickedLogoutButton' is assigned a value but never used.","'setClickedLogoutButton' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]